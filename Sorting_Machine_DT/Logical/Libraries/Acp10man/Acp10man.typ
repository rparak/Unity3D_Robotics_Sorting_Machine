TYPE
ACP10SWVER_typ : STRUCT                                     (* SW Version ID [hexadecimal] *)
   nc_manager           : UINT ;                            (* NC manager *)
   nc_system            : UINT ;                            (* NC operating system *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
END_STRUCT;
ACP10OBIHW_typ : STRUCT                                     (* Hardware information *)
   init                 : USINT ;                           (* Initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   acp_id               : USINT ;                           (* ACOPOS ID *)
   acp_id_nr            : USINT ;                           (* ACOPOS ID production number *)
   acp_typ              : USINT ;                           (* ACOPOS type *)
   ax_num               : USINT ;                           (* Number of axes (power stages) *)
   reserve2             : UINT ;                            (* Reserved *)
   product_code         : UDINT ;                           (* Product code *)
   serial_nr            : UDINT ;                           (* Serial number *)
END_STRUCT;
ACP10OBINF_typ : STRUCT                                     (* NC Object Information *)
   net_if_typ           : UINT ;                            (* Network interface type *)
   net_if_idx           : UINT ;                            (* Network interface index *)
   node_nr              : UINT ;                            (* Drive node number *)
   nc_obj_typ           : UINT ;                            (* NC object type *)
   nc_obj_idx           : UINT ;                            (* NC object index *)
   reserve              : UINT ;                            (* Reserved *)
   nc_obj_name          : ARRAY [0..47] OF USINT ;          (* NC object name *)
   hardware             : ACP10OBIHW_typ ;                  (* Hardware information *)
END_STRUCT;
ACP10SIMM1_typ : STRUCT                                     (* Mass1 *)
   inertia              : REAL ;                            (* Mass moment of inertia *)
   static_friction      : REAL ;                            (* Static friction *)
   viscous_friction     : REAL ;                            (* Viscous friction *)
END_STRUCT;
ACP10SIMM2_typ : STRUCT                                     (* Mass2 *)
   inertia              : REAL ;                            (* Mass moment of inertia *)
   static_friction      : REAL ;                            (* Static friction *)
   viscous_friction     : REAL ;                            (* Viscous friction *)
   stiffness            : REAL ;                            (* Stiffness of coupling *)
   damping              : REAL ;                            (* Damping of coupling *)
END_STRUCT;
ACP10SIMGB_typ : STRUCT                                     (* Gearbox *)
   direction            : USINT ;                           (* Direction *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   in_rev               : UDINT ;                           (* Input revolutions *)
   out_rev              : UDINT ;                           (* Output revolutions *)
END_STRUCT;
ACP10SIMPA_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   add_load_par_id      : UINT ;                            (* Parameter ID for additive load *)
   mass1                : ACP10SIMM1_typ ;                  (* Mass1 *)
   mass2                : ACP10SIMM2_typ ;                  (* Mass2 *)
   gear                 : ACP10SIMGB_typ ;                  (* Gearbox *)
END_STRUCT;
ACP10SIM_typ : STRUCT                                       (* Simulation mode *)
   init                 : USINT ;                           (* Initialized *)
   NOT_USE_1            : USINT ;
   status               : USINT ;                           (* Status *)
   acp_sim              : USINT ;                           (* ACOPOS simulation *)
   NOT_USE_2            : ARRAY [0..3] OF USINT ;
   parameter            : ACP10SIMPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10GLIPA_typ : STRUCT                                     (* INIT Parameters *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   reserve              : UINT ;                            (* Reserved *)
   datobj_ident         : UDINT ;                           (* Data object ident *)
   data_modul           : ARRAY [0..11] OF USINT ;          (* Name of the data module *)
END_STRUCT;
ACP10GLINI_typ : STRUCT                                     (* Global Initialization *)
   init                 : USINT ;                           (* Global Initialization complete *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   init_par             : ACP10GLIPA_typ ;                  (* INIT Parameters *)
END_STRUCT;
ACP10NSVRQ_typ : STRUCT                                     (* Request (to the drive) *)
   par_id               : UINT ;                            (* Parameter ID *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10NSVRS_typ : STRUCT                                     (* Response (from the drive) *)
   par_id               : UINT ;                            (* Parameter ID *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10NETSV_typ : STRUCT                                     (* Service Interface *)
   data_adr             : UDINT ;                           (* Data address *)
   data_text            : ARRAY [0..31] OF USINT ;          (* Data in text format *)
   request              : ACP10NSVRQ_typ ;                  (* Request (to the drive) *)
   response             : ACP10NSVRS_typ ;                  (* Response (from the drive) *)
END_STRUCT;
ACP10NET_typ : STRUCT                                       (* Network *)
   init                 : USINT ;                           (* Network initialized *)
   phase                : USINT ;                           (* Phase *)
   init_allowed         : USINT ;                           (* The NC action for network initialization is allowed *)
   nc_sys_restart       : USINT ;                           (* A Restart of the NC operating system was executed *)
   reserve              : UINT ;                            (* Reserved *)
   reserve1             : UINT ;                            (* Reserved *)
   service              : ACP10NETSV_typ ;                  (* Service Interface *)
END_STRUCT;
ACP10AXDBS_typ : STRUCT                                     (* Status *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
   data_len             : UDINT ;                           (* Length of data *)
   datobj_ident         : UDINT ;                           (* Data object ident *)
   datobj_datadr        : UDINT ;                           (* Address of the data object data *)
END_STRUCT;
ACP10AXDBP_typ : STRUCT                                     (* Parameters *)
   file_device          : ARRAY [0..31] OF USINT ;          (* Name of File Device *)
   datobj_name          : ARRAY [0..31] OF USINT ;          (* Name of the data object *)
   datobj_type          : UINT ;                            (* Type of the data object *)
   datblock_par_id      : UINT ;                            (* Parameter ID of the data block *)
   idx1_par_id          : UINT ;                            (* Parameter ID of data block index 1 *)
   idx1                 : UINT ;                            (* Data block index 1 *)
   idx2_par_id          : UINT ;                            (* Parameter ID of data block index 2 *)
   idx2                 : UINT ;                            (* Data block index 2 *)
   NOT_USE_1            : ARRAY [0..7] OF USINT ;
END_STRUCT;
ACP10AXDBL_typ : STRUCT                                     (* Data block operation *)
   status               : ACP10AXDBS_typ ;                  (* Status *)
   parameter            : ACP10AXDBP_typ ;                  (* Parameters *)
END_STRUCT;
ACP10DISTA_typ : STRUCT                                     (* Status *)
   reference            : USINT ;                           (* Reference switch *)
   pos_hw_end           : USINT ;                           (* Positive HW end switch *)
   neg_hw_end           : USINT ;                           (* Negative HW end switch *)
   trigger1             : USINT ;                           (* Trigger1 *)
   trigger2             : USINT ;                           (* Trigger2 *)
   enable               : USINT ;                           (* Enable *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10DILEV_typ : STRUCT                                     (* Active Input Level *)
   reference            : UINT ;                            (* Reference switch *)
   pos_hw_end           : UINT ;                            (* Positive HW end switch *)
   neg_hw_end           : UINT ;                            (* Negative HW end switch *)
   trigger1             : UINT ;                            (* Trigger1 *)
   trigger2             : UINT ;                            (* Trigger2 *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10DIFRC_typ : STRUCT                                     (* Set Status of digital Inputs via Force function *)
   reference            : USINT ;                           (* Reference switch *)
   pos_hw_end           : USINT ;                           (* Positive HW end switch *)
   neg_hw_end           : USINT ;                           (* Negative HW end switch *)
   trigger1             : USINT ;                           (* Trigger1 *)
   trigger2             : USINT ;                           (* Trigger2 *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10DIGIN_typ : STRUCT                                     (* Digital Inputs *)
   init                 : USINT ;                           (* Digital inputs initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   status               : ACP10DISTA_typ ;                  (* Status *)
   level                : ACP10DILEV_typ ;                  (* Active Input Level *)
   force                : ACP10DIFRC_typ ;                  (* Set status of digital inputs via force function *)
END_STRUCT;
ACP10ENCSL_typ : STRUCT                                     (* Load *)
   units                : UDINT ;                           (* Units at the load *)
   rev_motor            : UDINT ;                           (* Motor revolutions *)
END_STRUCT;
ACP10ENCSC_typ : STRUCT                                     (* Scaling *)
   load                 : ACP10ENCSL_typ ;                  (* Load *)
END_STRUCT;
ACP10ENCPA_typ : STRUCT                                     (* Parameters *)
   count_dir            : USINT ;                           (* Count direction *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   scaling              : ACP10ENCSC_typ ;                  (* Scaling *)
END_STRUCT;
ACP10ENCIF_typ : STRUCT                                     (* Encoder Interface *)
   init                 : USINT ;                           (* Encoder interface initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   parameter            : ACP10ENCPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10AXLPA_typ : STRUCT                                     (* Parameters *)
   v_pos                : REAL ;                            (* Speed in positive direction *)
   v_neg                : REAL ;                            (* Speed in negative direction *)
   a1_pos               : REAL ;                            (* Acceleration in positive direction *)
   a2_pos               : REAL ;                            (* Deceleration in positive direction *)
   a1_neg               : REAL ;                            (* Acceleration in negative direction *)
   a2_neg               : REAL ;                            (* Deceleration in negative direction *)
   t_jolt               : REAL ;                            (* Jolt time *)
   t_in_pos             : REAL ;                            (* Settling time before message "In Position" *)
   pos_sw_end           : DINT ;                            (* Positive SW end *)
   neg_sw_end           : DINT ;                            (* Negative SW end *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   ds_warning           : REAL ;                            (* Lag error limit for display of a warning *)
   ds_stop              : REAL ;                            (* Lag error limit for stop of a movement *)
   a_stop               : REAL ;                            (* Acceleration limit for stop of a movement *)
   dv_stop              : REAL ;                            (* Speed error limit for stop of a movement *)
   dv_stop_mode         : UDINT ;                           (* Mode for speed error monitoring *)
END_STRUCT;
ACP10AXLIM_typ : STRUCT                                     (* Limit values *)
   init                 : USINT ;                           (* Axis limit values initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   parameter            : ACP10AXLPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10CTRPO_typ : STRUCT                                     (* Position controller *)
   kv                   : REAL ;                            (* Proportional amplification *)
   tn                   : REAL ;                            (* Integral action time *)
   t_predict            : REAL ;                            (* Prediction time *)
   t_total              : REAL ;                            (* Total time *)
   p_max                : REAL ;                            (* Maximum proportional action *)
   i_max                : REAL ;                            (* Maximum integral action *)
END_STRUCT;
ACP10ISQFI_typ : STRUCT                                     (* ISQ Filter *)
   type                 : UINT ;                            (* Type *)
   reserve              : UINT ;                            (* Reserved *)
   a0                   : REAL ;                            (* Coefficient a0 *)
   a1                   : REAL ;                            (* Coefficient a1 *)
   b0                   : REAL ;                            (* Coefficient b0 *)
   b1                   : REAL ;                            (* Coefficient b1 *)
   b2                   : REAL ;                            (* Coefficient b2 *)
   c0_par_id            : UINT ;                            (* Parameter ID for coefficient c0 *)
   c1_par_id            : UINT ;                            (* Parameter ID for coefficient c1 *)
END_STRUCT;
ACP10CTRSP_typ : STRUCT                                     (* Speed controller *)
   kv                   : REAL ;                            (* Proportional amplification *)
   tn                   : REAL ;                            (* Integral action time *)
   t_filter             : REAL ;                            (* Filter time constant *)
   isq_filter1          : ACP10ISQFI_typ ;                  (* ISQ Filter1 *)
   isq_filter2          : ACP10ISQFI_typ ;                  (* ISQ Filter2 *)
   isq_filter3          : ACP10ISQFI_typ ;                  (* ISQ Filter3 *)
END_STRUCT;
ACP10CTRUF_typ : STRUCT                                     (* U/f Control *)
   type                 : USINT ;                           (* Type *)
   auto_config          : USINT ;                           (* Automatic configuration *)
   reserve              : UINT ;                            (* Reserved *)
   u0                   : REAL ;                            (* Boost voltage *)
   un                   : REAL ;                            (* Rated voltage *)
   fn                   : REAL ;                            (* Rated frequency *)
   k_f_slip             : REAL ;                            (* Slip compensation: Multiplication factor of compensated frequency *)
END_STRUCT;
ACP10CTRFF_typ : STRUCT                                     (* Feed Forward Control *)
   mode                 : UINT ;                            (* Mode *)
   reserve              : UINT ;                            (* Reserved *)
   torque_load          : REAL ;                            (* Load torque *)
   torque_pos           : REAL ;                            (* Torque in positive direction *)
   torque_neg           : REAL ;                            (* Torque in negative direction *)
   kv_torque            : REAL ;                            (* Speed torque factor *)
   inertia              : REAL ;                            (* Mass moment of inertia *)
   t_filter_a           : REAL ;                            (* Acceleration filter time constant *)
END_STRUCT;
ACP10CTRFB_typ : STRUCT                                     (* Feedback Control *)
   mode                 : UINT ;                            (* Mode *)
   reserve              : UINT ;                            (* Reserved *)
   speed_mix_ratio      : REAL ;                            (* Mixing ratio for speed *)
   speed_kv             : REAL ;                            (* Proportional amplification for speed *)
END_STRUCT;
ACP10CTRMODM1_typ : STRUCT                                  (* Mass1 *)
   inertia              : REAL ;                            (* Mass moment of inertia *)
   viscous_friction     : REAL ;                            (* Viscous friction *)
END_STRUCT;
ACP10CTRMODM2_typ : STRUCT                                  (* Mass2 *)
   inertia              : REAL ;                            (* Mass moment of inertia *)
   viscous_friction     : REAL ;                            (* Viscous friction *)
   stiffness            : REAL ;                            (* Stiffness of coupling *)
   damping              : REAL ;                            (* Damping of coupling *)
END_STRUCT;
ACP10CTRMODEL_typ : STRUCT                                  (* Model *)
   mass1                : ACP10CTRMODM1_typ ;               (* Mass1 *)
   mass2                : ACP10CTRMODM2_typ ;               (* Mass2 *)
END_STRUCT;
ACP10CTRL_typ : STRUCT                                      (* Controller *)
   init                 : USINT ;                           (* Controller initialized *)
   ready                : USINT ;                           (* Ready *)
   status               : USINT ;                           (* Status *)
   mode                 : USINT ;                           (* Mode *)
   position             : ACP10CTRPO_typ ;                  (* Position Controller *)
   speed                : ACP10CTRSP_typ ;                  (* Speed Controller *)
   uf                   : ACP10CTRUF_typ ;                  (* U/f Control *)
   ff                   : ACP10CTRFF_typ ;                  (* Feed Forward Control *)
   fb                   : ACP10CTRFB_typ ;                  (* Feedback Control *)
   model                : ACP10CTRMODEL_typ ;               (* Model *)
END_STRUCT;
ACP10AXSTI_typ : STRUCT                                     (* Index of Parameter Record *)
   command              : USINT ;                           (* for the next stop command *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10AXSTP_typ : STRUCT                                     (* Parameter Records *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   controller           : USINT ;                           (* Controller state after movement abortion *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10AXSTQ_typ : STRUCT                                     (* Quickstop *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   t_jolt               : REAL ;                            (* Jolt time *)
END_STRUCT;
ACP10AXSTD_typ : STRUCT                                     (* Drive error *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10AXSTO_typ : STRUCT                                     (* Stop Movement *)
   init                 : USINT ;                           (* Stop initialized *)
   NOT_USE_1            : USINT ;
   reserve2             : UINT ;                            (* Reserved *)
   index                : ACP10AXSTI_typ ;                  (* Index *)
   parameter            : ARRAY [0..3] OF ACP10AXSTP_typ ;  (* Parameter record *)
   quickstop            : ACP10AXSTQ_typ ;                  (* Quickstop *)
   drive_error          : ACP10AXSTD_typ ;                  (* Drive error *)
END_STRUCT;
ACP10HOMST_typ : STRUCT                                     (* Status *)
   ok                   : USINT ;                           (* Reference position valid *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   tr_s_rel             : REAL ;                            (* Distance between activation of "triggering reference pulse" and the occurrence of the reference pulse *)
   offset               : DINT ;                            (* Home offset after completion of homing procedure *)
END_STRUCT;
ACP10HOMPA_typ : STRUCT                                     (* Parameters *)
   s                    : DINT ;                            (* Reference position *)
   v_switch             : REAL ;                            (* Speed for searching the reference switch *)
   v_trigger            : REAL ;                            (* Trigger Speed *)
   a                    : REAL ;                            (* Acceleration *)
   mode                 : USINT ;                           (* Mode *)
   edge_sw              : USINT ;                           (* Edge of reference switch *)
   start_dir            : USINT ;                           (* Start direction *)
   trigg_dir            : USINT ;                           (* Trigger direction *)
   ref_pulse            : USINT ;                           (* Reference pulse *)
   fix_dir              : USINT ;                           (* Fixed direction *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
   tr_s_block           : REAL ;                            (* Distance for blocking the activation of "triggering reference pulse" *)
   torque_lim           : REAL ;                            (* Torque limit for homing on block *)
   ds_block             : REAL ;                            (* Lag error for block detection *)
   ds_stop              : REAL ;                            (* Lag error for stop of a movement *)
END_STRUCT;
ACP10HOME_typ : STRUCT                                      (* Homing *)
   init                 : USINT ;                           (* Homing procedure initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   status               : ACP10HOMST_typ ;                  (* Status *)
   parameter            : ACP10HOMPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10BMVST_typ : STRUCT                                     (* Status *)
   in_pos               : USINT ;                           (* "In Position" (target position reached) *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10BMVOV_typ : STRUCT                                     (* Override *)
   v                    : UINT ;                            (* Speed override *)
   a                    : UINT ;                            (* Acceleration override *)
END_STRUCT;
ACP10BMVPA_typ : STRUCT                                     (* Parameters *)
   s                    : DINT ;                            (* Target position or relative move distance *)
   v_pos                : REAL ;                            (* Speed in positive direction *)
   v_neg                : REAL ;                            (* Speed in negative direction *)
   a1_pos               : REAL ;                            (* Acceleration in positive direction *)
   a2_pos               : REAL ;                            (* Deceleration in positive direction *)
   a1_neg               : REAL ;                            (* Acceleration in negative direction *)
   a2_neg               : REAL ;                            (* Deceleration in negative direction *)
END_STRUCT;
ACP10TRSTP_typ : STRUCT                                     (* Mode "Stop after trigger" *)
   init                 : USINT ;                           (* Initialized *)
   event                : USINT ;                           (* Event *)
   reserve              : UINT ;                            (* Reserved *)
   s_rest               : DINT ;                            (* Remaining distance after trigger *)
   NOT_USE_1            : ARRAY [0..11] OF USINT ;
END_STRUCT;
ACP10BAMOV_typ : STRUCT                                     (* Basis Movements *)
   init                 : USINT ;                           (* Basis movements initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   status               : ACP10BMVST_typ ;                  (* Status *)
   override             : ACP10BMVOV_typ ;                  (* Override *)
   parameter            : ACP10BMVPA_typ ;                  (* Parameters *)
   trg_stop             : ACP10TRSTP_typ ;                  (* Mode "Stop after trigger" *)
END_STRUCT;
ACP10AXMOV_typ : STRUCT                                     (* Movement *)
   mode                 : UINT ;                            (* Mode *)
   detail               : UINT ;                            (* Detail *)
   stop                 : ACP10AXSTO_typ ;                  (* Stop Movement *)
   homing               : ACP10HOME_typ ;                   (* Homing procedure *)
   basis                : ACP10BAMOV_typ ;                  (* Basis movements *)
END_STRUCT;
ACP10SUOST_typ : STRUCT                                     (* Status *)
   ident                : UDINT ;                           (* Ident of data object *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10SUOPA_typ : STRUCT                                     (* Parameters *)
   name                 : ARRAY [0..11] OF USINT ;          (* Name of data object *)
END_STRUCT;
ACP10SUOBJ_typ : STRUCT                                     (* Data object *)
   status               : ACP10SUOST_typ ;                  (* Status *)
   parameter            : ACP10SUOPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUMAS_typ : STRUCT                                     (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   quality              : REAL ;                            (* Quality of parameter identification *)
END_STRUCT;
ACP10SUMAO_typ : STRUCT                                     (* Optional parameters *)
   z_p                  : USINT ;                           (* Number of polepairs *)
   phase                : USINT ;                           (* Phase *)
   reserve2             : UINT ;                            (* Reserved *)
   u_const              : REAL ;                            (* Voltage constant *)
   v_max                : REAL ;                            (* Maximum speed *)
   trq_0                : REAL ;                            (* Stall  torque *)
   trq_n                : REAL ;                            (* Rated torque *)
   trq_max              : REAL ;                            (* Peak  torque *)
   trq_const            : REAL ;                            (* Torque constant *)
   i_0                  : REAL ;                            (* Stall current *)
   i_max                : REAL ;                            (* Peak current *)
   i_m                  : REAL ;                            (* Magnetizing current *)
   phase_cross_sect     : REAL ;                            (* Cross section of a phase *)
   invcl_a1             : REAL ;                            (* Inverter characteristic: Gain factor *)
   invcl_a2             : REAL ;                            (* Inverter characteristic: Exponent *)
END_STRUCT;
ACP10SUMAP_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   reserve              : UINT ;                            (* Reserved *)
   u_n                  : REAL ;                            (* Rated voltage *)
   i_n                  : REAL ;                            (* Rated current *)
   v_n                  : REAL ;                            (* Rated speed *)
   f_n                  : REAL ;                            (* Rated frequency *)
   cos_phi              : REAL ;                            (* Active power factor *)
   t_tripping_therm     : REAL ;                            (* Tripping time at thermal overload *)
   optional             : ACP10SUMAO_typ ;                  (* Optional parameters *)
END_STRUCT;
ACP10SUMA_typ : STRUCT                                      (* Induction motor *)
   status               : ACP10SUMAS_typ ;                  (* Status *)
   parameter            : ACP10SUMAP_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUMSS_typ : STRUCT                                     (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   quality              : REAL ;                            (* Quality of parameter identification *)
END_STRUCT;
ACP10SUMSO_typ : STRUCT                                     (* Optional parameters *)
   phase                : USINT ;                           (* Phase *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   u_const              : REAL ;                            (* Voltage constant *)
   v_max                : REAL ;                            (* Maximum speed *)
   trq_0                : REAL ;                            (* Stall  torque *)
   trq_const            : REAL ;                            (* Torque constant *)
   i_0                  : REAL ;                            (* Stall current *)
   phase_cross_sect     : REAL ;                            (* Cross section of a phase *)
   invcl_a1             : REAL ;                            (* Inverter characteristic: Gain factor *)
   invcl_a2             : REAL ;                            (* Inverter characteristic: Exponent *)
END_STRUCT;
ACP10SUMSP_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   z_p                  : USINT ;                           (* Number of polepairs *)
   reserve              : USINT ;                           (* Reserved *)
   u_n                  : REAL ;                            (* Rated voltage *)
   i_n                  : REAL ;                            (* Rated current *)
   v_n                  : REAL ;                            (* Rated speed *)
   trq_n                : REAL ;                            (* Rated torque *)
   trq_max              : REAL ;                            (* Peak  torque *)
   i_max                : REAL ;                            (* Peak current *)
   t_tripping_therm     : REAL ;                            (* Tripping time at thermal overload *)
   optional             : ACP10SUMSO_typ ;                  (* Optional parameters *)
END_STRUCT;
ACP10SUMS_typ : STRUCT                                      (* Synchronous motor *)
   status               : ACP10SUMSS_typ ;                  (* Status *)
   parameter            : ACP10SUMSP_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUPHS_typ : STRUCT                                     (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   rho_0                : REAL ;                            (* Commutation offset *)
   z_p                  : USINT ;                           (* Number of polepairs *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10SUPHP_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   reserve              : UINT ;                            (* Reserved *)
   i                    : REAL ;                            (* Current *)
   t                    : REAL ;                            (* Time *)
END_STRUCT;
ACP10SUPH_typ : STRUCT                                      (* Motor phasing *)
   status               : ACP10SUPHS_typ ;                  (* Status *)
   parameter            : ACP10SUPHP_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUCST_typ : STRUCT                                     (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
END_STRUCT;
ACP10SUCPA_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   orientation          : USINT ;                           (* Orientation *)
   operating_point      : USINT ;                           (* Operating point *)
   i_max_percent        : REAL ;                            (* Maximum percentage for rated current *)
   v_max_percent        : REAL ;                            (* Maximum percentage for speed limit value *)
   s_max                : DINT ;                            (* Maximum move distance *)
   ds_max               : REAL ;                            (* Maximum lag error *)
   kv_percent           : REAL ;                            (* Percentage for proportional amplification *)
   signal_order         : UDINT ;                           (* Order of excitation signal *)
   kv_max               : REAL ;                            (* Maximum proportional amplification *)
   a                    : REAL ;                            (* Acceleration *)
   signal_type          : UINT ;                            (* Type of the excitation signal *)
   reserve              : UINT ;                            (* Reserved *)
   signal_f_start       : REAL ;                            (* Start frequency of the excitation signal *)
   signal_f_stop        : REAL ;                            (* Stop frequency of the excitation signal *)
   signal_time          : REAL ;                            (* Duration of the excitation signal *)
END_STRUCT;
ACP10SUCTR_typ : STRUCT                                     (* Controller *)
   status               : ACP10SUCST_typ ;                  (* Status *)
   parameter            : ACP10SUCPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUIRS_typ : STRUCT                                     (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   quality              : REAL ;                            (* Quality of parameter identification *)
END_STRUCT;
ACP10SUIRP_typ : STRUCT                                     (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   reserve              : USINT ;                           (* Reserved *)
   ref_system           : USINT ;                           (* Reference system *)
   pos_offset           : REAL ;                            (* Position offset *)
   v                    : REAL ;                            (* Speed *)
END_STRUCT;
ACP10SUIR_typ : STRUCT                                      (* ISQ-Ripple *)
   status               : ACP10SUIRS_typ ;                  (* Status *)
   parameter            : ACP10SUIRP_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SUMOVST_typ : STRUCT                                   (* Status *)
   mode                 : UINT ;                            (* Mode *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
END_STRUCT;
ACP10SUMOPA_typ : STRUCT                                    (* Parameters *)
   mode                 : UINT ;                            (* Mode *)
   start_dir            : USINT ;                           (* Start direction *)
   fix_dir              : USINT ;                           (* Fixed direction *)
   s_max                : DINT ;                            (* Maximum move distance *)
END_STRUCT;
ACP10SUMOV_typ : STRUCT                                     (* Movement *)
   status               : ACP10SUMOVST_typ ;                (* Status *)
   parameter            : ACP10SUMOPA_typ ;                 (* Parameters *)
END_STRUCT;
ACP10SETUP_typ : STRUCT                                     (* Setup *)
   status               : USINT ;                           (* Status *)
   active               : USINT ;                           (* Active *)
   detail               : UINT ;                            (* Detail *)
   datobj               : ACP10SUOBJ_typ ;                  (* Data object *)
   motor_induction      : ACP10SUMA_typ ;                   (* Induction motor *)
   motor_synchron       : ACP10SUMS_typ ;                   (* Synchronous motor *)
   motor_phasing        : ACP10SUPH_typ ;                   (* Motor phasing *)
   controller           : ACP10SUCTR_typ ;                  (* Controller *)
   isq_ripple           : ACP10SUIR_typ ;                   (* ISQ-Ripple *)
   move                 : ACP10SUMOV_typ ;                  (* Movement *)
END_STRUCT;
ACP10AXMOS_typ : STRUCT                                     (* Status Bits *)
   error                : USINT ;                           (* Error occurred *)
   warning              : USINT ;                           (* Warning occurred *)
   ds_warning           : USINT ;                           (* Lag error limit for display of a warning *)
   reserve              : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10AXMON_typ : STRUCT                                     (* Monitor *)
   s                    : DINT ;                            (* Position *)
   v                    : REAL ;                            (* Velocity *)
   status               : ACP10AXMOS_typ ;                  (* Status bits *)
END_STRUCT;
ACP10MSCNT_typ : STRUCT                                     (* Number of not acknowledged messages *)
   error                : USINT ;                           (* Count of not acknowledged errors *)
   warning              : USINT ;                           (* Count of not acknowledged warnings *)
   mc_fb_error          : USINT ;                           (* Count of not acknowledged PLCopen MC FB errors *)
   reserve              : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10MSREC_typ : STRUCT                                     (* Current message record *)
   par_id               : UINT ;                            (* Parameter ID *)
   number               : UINT ;                            (* Error number *)
   info                 : UDINT ;                           (* Additional Info *)
END_STRUCT;
ACP10MTXST_typ : STRUCT                                     (* Status of text determination *)
   lines                : UINT ;                            (* Lines of the determined text *)
   error                : UINT ;                            (* Error *)
END_STRUCT;
ACP10MTXPA_typ : STRUCT                                     (* Parameters for text determination *)
   format               : UINT ;                            (* Format *)
   columns              : UINT ;                            (* Number of columns per line *)
   data_modul           : ARRAY [0..11] OF USINT ;          (* Name of the data module *)
   data_len             : UINT ;                            (* Length of data buffer in application program *)
   reserve              : UINT ;                            (* Reserved *)
   data_adr             : UDINT ;                           (* Data address *)
   record_adr           : UDINT ;                           (* Address of message record in application program *)
END_STRUCT;
ACP10MSTXT_typ : STRUCT                                     (* Text determination for current message record *)
   status               : ACP10MTXST_typ ;                  (* Status *)
   parameter            : ACP10MTXPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10MSCMDERR_typ : STRUCT                                  (* Command: Execute error reaction *)
   type                 : UINT ;                            (* Type *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
END_STRUCT;
ACP10MSG_typ : STRUCT                                       (* Messages *)
   count                : ACP10MSCNT_typ ;                  (* Count of not acknowledged messages *)
   record               : ACP10MSREC_typ ;                  (* Error record *)
   text                 : ACP10MSTXT_typ ;                  (* Text determination for current message record *)
   cmd_error            : ACP10MSCMDERR_typ ;               (* Command: Execute error reaction *)
END_STRUCT;
ACP10NCTST_typ : STRUCT                                     (* NC Test *)
   Open_UseApplNcObj    : USINT ;                           (* Open test: Use the same NC object as the application *)
   Close_NoMoveAbort    : USINT ;                           (* Close test: No move abortion *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10AXIS_typ : STRUCT                                      (* ACP10 - Real Axis *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   NOT_USE_2            : ARRAY [0..1] OF USINT ;
   sw_version           : ACP10SWVER_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   simulation           : ACP10SIM_typ ;                    (* Simulation Mode *)
   global               : ACP10GLINI_typ ;                  (* Global Parameters *)
   network              : ACP10NET_typ ;                    (* Network *)
   datblock             : ACP10AXDBL_typ ;                  (* Data block operation *)
   dig_in               : ACP10DIGIN_typ ;                  (* Digital Inputs *)
   encoder_if           : ACP10ENCIF_typ ;                  (* Encoder Interface *)
   limit                : ACP10AXLIM_typ ;                  (* Limit value *)
   controller           : ACP10CTRL_typ ;                   (* Controller *)
   move                 : ACP10AXMOV_typ ;                  (* Movement *)
   setup                : ACP10SETUP_typ ;                  (* Setup *)
   monitor              : ACP10AXMON_typ ;                  (* Monitor *)
   message              : ACP10MSG_typ ;                    (* Messages (errors, warnings) *)
   nc_test              : ACP10NCTST_typ ;                  (* NC Test *)
   NOT_USE_3            : ARRAY [0..59] OF USINT ;
END_STRUCT;
ACP10MONET_typ : STRUCT                                     (* Network *)
   init                 : USINT ;                           (* Initialized *)
   phase                : USINT ;                           (* Phase *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10TRCTR_typ : STRUCT                                     (* Trigger *)
   par_id               : UINT ;                            (* Parameter ID *)
   event                : USINT ;                           (* Event *)
   reserve              : USINT ;                           (* Reserved *)
   threshold            : REAL ;                            (* Threshold *)
   window               : REAL ;                            (* Window *)
END_STRUCT;
ACP10TRCDA_typ : STRUCT                                     (* Test data *)
   par_id               : UINT ;                            (* Parameter ID *)
END_STRUCT;
ACP10TRCSV_typ : STRUCT                                     (* Operating System Variable *)
   data_type            : USINT ;                           (* Data type *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   address              : UDINT ;                           (* Address *)
END_STRUCT;
ACP10TRCSY_typ : STRUCT                                     (* Configuration of Operating System Variables *)
   trigger              : ACP10TRCSV_typ ;                  (* Trigger *)
   test_dat             : ARRAY [0..9] OF ACP10TRCSV_typ ;  (* Test data *)
END_STRUCT;
ACP10TRC_typ : STRUCT                                       (* Trace *)
   status               : USINT ;                           (* Status *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   buf_size             : UDINT ;                           (* Size of trace data buffer on the drive *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   t_trace              : REAL ;                            (* Recording time *)
   t_sampling           : REAL ;                            (* Sampling time *)
   t_delay              : REAL ;                            (* Start delay *)
   trigger              : ACP10TRCTR_typ ;                  (* Trigger *)
   test_dat             : ARRAY [0..9] OF ACP10TRCDA_typ ;  (* Test data *)
   system_var           : ACP10TRCSY_typ ;                  (* Configuration of Operating System Variables *)
END_STRUCT;
ACP10MODUL_typ : STRUCT                                     (* ACP10 - NC Module *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   reserve              : UINT ;                            (* Reserved *)
   sw_version           : ACP10SWVER_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   network              : ACP10MONET_typ ;                  (* Network *)
   trace                : ACP10TRC_typ ;                    (* Trace *)
   message              : ACP10MSG_typ ;                    (* Messages (errors, warnings) *)
   NOT_USE_2            : ARRAY [0..47] OF USINT ;
END_STRUCT;
ACP10SWVMA_typ : STRUCT                                     (* SW-Version (only NC Manager) *)
   nc_manager           : UINT ;                            (* NC manager *)
   reserve              : UINT ;                            (* Reserved *)
   reserve1             : UINT ;                            (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10MTRTR_typ : STRUCT                                     (* Trigger *)
   nc_object            : UDINT ;                           (* NC object or ncOFF *)
   par_id               : UINT ;                            (* Parameter ID *)
   event                : USINT ;                           (* Event *)
   reserve              : USINT ;                           (* Reserved *)
   threshold            : REAL ;                            (* Threshold *)
   window               : REAL ;                            (* Latch window *)
END_STRUCT;
ACP10MTRDA_typ : STRUCT                                     (* Test data *)
   nc_object            : UDINT ;                           (* NC object or ncOFF *)
   par_id               : UINT ;                            (* Parameter ID *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10TROST_typ : STRUCT                                     (* Status *)
   ident                : UDINT ;                           (* Ident of data object *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10TROPA_typ : STRUCT                                     (* Parameters *)
   name                 : ARRAY [0..31] OF USINT ;          (* Name of data object *)
   file_device          : ARRAY [0..31] OF USINT ;          (* Name of File Device *)
   type                 : UINT ;                            (* Type *)
   format               : UINT ;                            (* Format *)
END_STRUCT;
ACP10TROBJ_typ : STRUCT                                     (* Data object *)
   status               : ACP10TROST_typ ;                  (* Status *)
   parameter            : ACP10TROPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10MTR_typ : STRUCT                                       (* Trace *)
   status               : USINT ;                           (* Status *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   t_trace              : REAL ;                            (* Recording time *)
   t_sampling           : REAL ;                            (* Sampling time *)
   t_delay              : REAL ;                            (* Start delay *)
   t_add_net_trigger    : REAL ;                            (* Start delay: Value to be added for network trigger *)
   trigger              : ACP10MTRTR_typ ;                  (* Trigger *)
   test_dat             : ARRAY [0..99] OF ACP10MTRDA_typ ;  (* Test data *)
   datobj               : ACP10TROBJ_typ ;                  (* Data object *)
END_STRUCT;
ACP10MUTRC_typ : STRUCT                                     (* ACP10 - Multi Axes Trace *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   reserve              : UINT ;                            (* Reserved *)
   sw_version           : ACP10SWVMA_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   trace                : ACP10MTR_typ ;                    (* Trace *)
   message              : ACP10MSG_typ ;                    (* Messages (errors, warnings) *)
   NOT_USE_2            : ARRAY [0..47] OF USINT ;
END_STRUCT;
ACP10PCYUT_typ : STRUCT                                     (* Cyclic User Data to the Drive *)
   cnt                  : USINT ;                           (* Counter *)
   reserve1             : USINT ;                           (* Reserved *)
   data                 : ARRAY [0..17] OF USINT ;          (* Parameter Data *)
END_STRUCT;
ACP10PCYUF_typ : STRUCT                                     (* Cyclic User Data from the Drive *)
   cnt                  : USINT ;                           (* Counter *)
   reserve1             : USINT ;                           (* Reserved *)
   data                 : ARRAY [0..17] OF USINT ;          (* Parameter Data *)
END_STRUCT;
ACP10PLCUS_typ : STRUCT                                     (* ACP10 - Cyclic User Data for Powerlink *)
   to_drv               : ACP10PCYUT_typ ;                  (* Cyclic User Data to the Drive *)
   fr_drv               : ACP10PCYUF_typ ;                  (* Cyclic User Data from  the Drive *)
END_STRUCT;
ACP10DBLST_typ : STRUCT                                     (* Status *)
   data_len             : UDINT ;                           (* Length of data *)
   init                 : USINT ;                           (* Data block initialized *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   stop                 : USINT ;                           (* Stop *)
   datobj_ident         : UDINT ;                           (* Data object ident *)
END_STRUCT;
ACP10DBLPA_typ : STRUCT                                     (* Parameters *)
   data_len             : UDINT ;                           (* Length of data *)
   data_adr             : UDINT ;                           (* Data address *)
   data_modul           : ARRAY [0..11] OF USINT ;          (* Name of the data module *)
   index                : UINT ;                            (* Index *)
   mode                 : UINT ;                            (* Mode *)
   format               : UINT ;                            (* Format *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10DATBL_typ : STRUCT                                     (* Data block operation *)
   status               : ACP10DBLST_typ ;                  (* Status *)
   parameter            : ACP10DBLPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10PRADR_typ : STRUCT                                     (* Parameter record for format "ncFORMAT_ADR" *)
   par_id               : UINT ;                            (* Parameter ID *)
   reserve              : UINT ;                            (* Reserved *)
   data_adr             : UDINT ;                           (* Data address *)
END_STRUCT;
ACP10PRB06_typ : STRUCT                                     (* Parameter record for format "ncFORMAT_B06" *)
   par_id               : UINT ;                            (* Parameter ID *)
   reserve1             : UINT ;                            (* Reserved *)
   data_byte            : ARRAY [0..5] OF USINT ;           (* Data bytes *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10PRT10_typ : STRUCT                                     (* Parameter record for format "ncFORMAT_T10" *)
   par_id               : UINT ;                            (* Parameter ID *)
   data_text            : ARRAY [0..9] OF USINT ;           (* Data in text format *)
END_STRUCT;
ACP10PRT14_typ : STRUCT                                     (* Parameter record for format "ncFORMAT_T14" *)
   par_id               : UINT ;                            (* Parameter ID *)
   data_text            : ARRAY [0..13] OF USINT ;          (* Data in text format *)
END_STRUCT;
ACP10PRECS_typ : STRUCT                                     (* Parameter records *)
   format_adr           : ACP10PRADR_typ ;                  (* Parameter record for format "ncFORMAT_ADR" *)
   format_b06           : ACP10PRB06_typ ;                  (* Parameter record for format "ncFORMAT_B06" *)
   format_t10           : ACP10PRT10_typ ;                  (* Parameter record for format "ncFORMAT_T10" *)
   format_t14           : ACP10PRT14_typ ;                  (* Parameter record for format "ncFORMAT_T14" *)
END_STRUCT;
ACP10UCROP_typ : STRUCT                                     (* Operate Read COB *)
   can_obj              : UDINT ;                           (* CAN Object (COB handle) from CAN_defineCOB() *)
   can_id               : UINT ;                            (* CAN-ID *)
   handshake            : USINT ;                           (* Handshake *)
   reserve              : USINT ;                           (* Reserved *)
   data                 : ARRAY [0..7] OF USINT ;           (* Data *)
END_STRUCT;
ACP10NGLNW_typ : STRUCT                                     (* Network *)
   enable               : USINT ;                           (* Enable *)
   phase                : USINT ;                           (* Phase *)
   init                 : USINT ;                           (* Initialized *)
   reserve              : USINT ;                           (* Reserved *)
END_STRUCT;
ACP10NGNTR_typ : STRUCT                                     (* Network Trace *)
   status               : USINT ;                           (* Status *)
   reset                : USINT ;                           (* Reset active *)
   ring_startidx_auto   : USINT ;                           (* The start index of the ring buffer was saved automatically *)
   ring_startidx_action : USINT ;                           (* The start index of the ring buffer was saved via NC action *)
   datobj               : ACP10TROBJ_typ ;                  (* Data object *)
   NOT_USE_1            : ARRAY [0..7] OF USINT ;
END_STRUCT;
ACP10NETGL_typ : STRUCT                                     (* Network global (for all network interfaces) *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   reserve              : UINT ;                            (* Reserved *)
   sw_version           : ACP10SWVMA_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   network              : ACP10NGLNW_typ ;                  (* Network *)
   net_trace            : ACP10NGNTR_typ ;                  (* Network Trace *)
   message              : ACP10MSG_typ ;                    (* Messages (errors, warnings) *)
END_STRUCT;
ACP10DAMST_typ : STRUCT                                     (* Status *)
   datobj_ident         : UDINT ;                           (* Data object ident *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
   error_record         : ACP10MSREC_typ ;                  (* Error record *)
END_STRUCT;
ACP10DAMPA_typ : STRUCT                                     (* Parameters *)
   name                 : ARRAY [0..31] OF USINT ;          (* Name of the NC data module *)
   type                 : UINT ;                            (* Type *)
   reserve              : UINT ;                            (* Reserved *)
   nc_sw_id             : UINT ;                            (* NC Software ID *)
   version              : UINT ;                            (* Version *)
   data_len             : UDINT ;                           (* Length of data buffer in application program *)
   data_adr             : UDINT ;                           (* Address of data buffer in application program *)
END_STRUCT;
ACP10DATMO_typ : STRUCT                                     (* NC data module *)
   status               : ACP10DAMST_typ ;                  (* Status *)
   parameter            : ACP10DAMPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10SMCCFGOUTDA_typ : STRUCT                               (* SafeMC configuration: SafeOUT data *)
   data_byte            : ARRAY [0..3] OF USINT ;           (* Data bytes *)
END_STRUCT;
ACP10SMCCFGPLCE_typ : STRUCT                                (* SafeMC configuration: Powerlink Copy Entry *)
   node_nr              : USINT ;                           (* Node number *)
   direction_id         : USINT ;                           (* Direction ID *)
   direction_char       : SINT ;                            (* Direction character *)
   reserve1             : USINT ;                           (* Reserved *)
   ident                : UDINT ;                           (* ident *)
END_STRUCT;
ACP10SMCCFGOUT_typ : STRUCT                                 (* SafeMC configuration: SafeOUT data structure *)
   init_ok              : USINT ;                           (* Initialization OK *)
   net_dat_typ          : USINT ;                           (* Type of network data *)
   init_error           : UINT ;                            (* Initialization error *)
   data                 : ACP10SMCCFGOUTDA_typ ;            (* Data *)
   data_len             : UINT ;                            (* Data length *)
   data_offset          : UINT ;                            (* Data offset *)
   frame_len            : UINT ;                            (* Frame length *)
   frame_offset         : UINT ;                            (* Frame offset *)
   plCE                 : ACP10SMCCFGPLCE_typ ;             (* POWERLINK Copy Entry *)
END_STRUCT;
ACP10SMCCFGINDA_typ : STRUCT                                (* SafeMC configuration: SafeIN data *)
   data_byte            : ARRAY [0..11] OF USINT ;          (* Data bytes *)
END_STRUCT;
ACP10SMCCFGIN_typ : STRUCT                                  (* SafeMC configuration: SafeIN data structure *)
   init_ok              : USINT ;                           (* Initialization OK *)
   net_dat_typ          : USINT ;                           (* Type of network data *)
   init_error           : UINT ;                            (* Initialization error *)
   data                 : ACP10SMCCFGINDA_typ ;             (* Data *)
   data_len             : UINT ;                            (* Data length *)
   data_offset          : UINT ;                            (* Data offset *)
   frame_len            : UINT ;                            (* Frame length *)
   frame_offset         : UINT ;                            (* Frame offset *)
   plCE                 : ACP10SMCCFGPLCE_typ ;             (* POWERLINK Copy Entry *)
END_STRUCT;
ACP10SMCCFG_typ : STRUCT                                    (* SafeMC configuration *)
   nc_obj_name          : ARRAY [0..47] OF USINT ;          (* NC object name *)
   SafeOUT              : ACP10SMCCFGOUT_typ ;              (* SafeOUT data structure *)
   SafeIN               : ACP10SMCCFGIN_typ ;               (* SafeIN data structure *)
END_STRUCT;
ACP10SAFEINDAT_typ : STRUCT                                 (* SafeMC: SafeIN data *)
   SafetyActiveSTO      : USINT ;                           (* STO status bit *)
   SafetyActiveSBC      : USINT ;                           (* SBC status bit *)
   SafetyActiveSOS      : USINT ;                           (* SOS status bit *)
   SafetyActiveSS1      : USINT ;                           (* SS1 status bit *)
   SafetyActiveSS2      : USINT ;                           (* SS2 status bit *)
   SafetyActiveSLS1     : USINT ;                           (* SLS1 status bit *)
   SafetyActiveSLS2     : USINT ;                           (* SLS2 status bit *)
   SafetyActiveSLS3     : USINT ;                           (* SLS3 status bit *)
   SafetyActiveSLS4     : USINT ;                           (* SLS4 status bit *)
   SafetyActiveSTO1     : USINT ;                           (* STO1 status bit *)
   SafetyActiveSDIpos   : USINT ;                           (* SDIpos status bit *)
   SafetyActiveSLI      : USINT ;                           (* SLI status bit *)
   SafetyActiveSDIneg   : USINT ;                           (* SDIneg status bit *)
   SafetyActiveSLP      : USINT ;                           (* SLP status bit *)
   SafetyActiveSMP      : USINT ;                           (* SMP status bit *)
   SafePositionValid    : USINT ;                           (* SafePosition is valid *)
   SafetyActiveSLA      : USINT ;                           (* SLA status bit *)
   StatusSetPosAlive    : USINT ;                           (* Setposition is tested *)
   StatusSFR            : USINT ;                           (* At least one safety function is requested *)
   AllReqFuncAct        : USINT ;                           (* All requested safety functions are active *)
   SafetyActiveSDC      : USINT ;                           (* Deceleration monitoring status bit *)
   Operational          : USINT ;                           (* Function block is in state operational *)
   NotErrENC            : USINT ;                           (* Encoder error status bit *)
   NotErrFUNC           : USINT ;                           (* Functional Fail Safe status bit *)
   SafetyActiveSBT      : USINT ;                           (* SBT is active *)
   SafetyStatusSBT      : USINT ;                           (* SBT status bit *)
   RSPValid             : USINT ;                           (* RSP Valid bit *)
   ReqHomingOK          : USINT ;                           (* Request Homing OK bit *)
   reserved_stat_b28    : USINT ;                           (* reserved_stat_b28 *)
   reserved_stat_b29    : USINT ;                           (* reserved_stat_b29 *)
   reserved_stat_b30    : USINT ;                           (* reserved_stat_b30 *)
   reserved_stat_b31    : USINT ;                           (* reserved_stat_b31 *)
   ScaledSpeed          : INT ;                             (* Scaled safe speed *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
   SafePosition         : DINT ;                            (* Safe position *)
END_STRUCT;
ACP10SAFEINDAT2_typ : STRUCT                                (* SafeMC: SafeIN data2 *)
   NotErrFUNC           : USINT ;                           (* Functional Fail Safe status bit *)
   Operational          : USINT ;                           (* Function block is in state operational *)
   SafetyActiveSTO      : USINT ;                           (* STO status bit *)
   SafetyActiveSBC      : USINT ;                           (* SBC status bit *)
   SafetyActiveSS1      : USINT ;                           (* SS1 status bit *)
   NotErrENC            : USINT ;                           (* Encoder error status bit *)
   SafetyActiveSTO1     : USINT ;                           (* STO1 status bit *)
   SafetyActiveSDC      : USINT ;                           (* Deceleration monitoring status bit *)
   SafetyActiveSOS      : USINT ;                           (* SOS status bit *)
   SafetyActiveSS2      : USINT ;                           (* SS2 status bit *)
   SafetyActiveSLA      : USINT ;                           (* SLA status bit *)
   SafetyActiveSLS1     : USINT ;                           (* SLS1 status bit *)
   SafetyActiveSLS2     : USINT ;                           (* SLS2 status bit *)
   reserved_stat_b13    : USINT ;                           (* reserved_stat_b13 *)
   SafetyActiveSLS3     : USINT ;                           (* SLS3 status bit *)
   SafetyActiveSLS4     : USINT ;                           (* SLS4 status bit *)
   SafetyActiveSDIpos   : USINT ;                           (* SDIpos status bit *)
   SafetyActiveSDIneg   : USINT ;                           (* SDIneg status bit *)
   SafetyActiveSLI      : USINT ;                           (* SLI status bit *)
   SafetyStatusSBT      : USINT ;                           (* SBT status bit *)
   SafetyActiveSBT      : USINT ;                           (* SBT is active *)
   SafetyActiveSLT      : USINT ;                           (* SLT status bit *)
   StatusSFR            : USINT ;                           (* At least one safety function is requested *)
   AllReqFuncAct        : USINT ;                           (* All requested safety functions are active *)
   NotErrENC2           : USINT ;                           (* Encoder error status bit2 *)
   SafePositionValid    : USINT ;                           (* SafePosition is valid *)
   ReqHomingOK          : USINT ;                           (* Request Homing OK bit *)
   SafetyActiveSLP      : USINT ;                           (* SLP status bit *)
   SafetyActiveSMP      : USINT ;                           (* SMP status bit *)
   reserved_stat_b29    : USINT ;                           (* reserved_stat_b29 *)
   RSPValid             : USINT ;                           (* RSP Valid bit *)
   StatusSetPosAlive    : USINT ;                           (* Setposition is tested *)
   SafePosition         : DINT ;                            (* Safe position *)
   ScaledSpeed          : INT ;                             (* Scaled safe speed *)
   reserve1             : UINT ;                            (* Reserved *)
   reserve2             : UDINT ;                           (* Reserved *)
END_STRUCT;
ACP10SAFEINDAT3_typ : STRUCT                                (* SafeMC: SafeIN data3 *)
   NotErrFUNC           : USINT ;                           (* Functional Fail Safe status bit *)
   Operational          : USINT ;                           (* Function block is in state operational *)
   SafetyActiveSTO      : USINT ;                           (* STO status bit *)
   SafetyActiveSBC      : USINT ;                           (* SBC status bit *)
   SafetyActiveSS1      : USINT ;                           (* SS1 status bit *)
   NotErrENC            : USINT ;                           (* Encoder error status bit *)
   SafetyActiveSTO1     : USINT ;                           (* STO1 status bit *)
   SafetyActiveSDC      : USINT ;                           (* Deceleration monitoring status bit *)
   SafetyActiveSOS      : USINT ;                           (* SOS status bit *)
   SafetyActiveSS2      : USINT ;                           (* SS2 status bit *)
   SafetyActiveSLA      : USINT ;                           (* SLA status bit *)
   SafetyActiveSLS1     : USINT ;                           (* SLS1 status bit *)
   SafetyActiveSLS2     : USINT ;                           (* SLS2 status bit *)
   reserved_stat_b13    : USINT ;                           (* reserved_stat_b13 *)
   SafetyActiveSLS3     : USINT ;                           (* SLS3 status bit *)
   SafetyActiveSLS4     : USINT ;                           (* SLS4 status bit *)
   SafetyActiveSDIpos   : USINT ;                           (* SDIpos status bit *)
   SafetyActiveSDIneg   : USINT ;                           (* SDIneg status bit *)
   SafetyActiveSLI      : USINT ;                           (* SLI status bit *)
   SafetyStatusSBT      : USINT ;                           (* SBT status bit *)
   SafetyActiveSBT      : USINT ;                           (* SBT is active *)
   SafetyActiveSLT      : USINT ;                           (* SLT status bit *)
   StatusSFR            : USINT ;                           (* At least one safety function is requested *)
   AllReqFuncAct        : USINT ;                           (* All requested safety functions are active *)
   NotErrENC2           : USINT ;                           (* Encoder error status bit2 *)
   SafePositionValid    : USINT ;                           (* SafePosition is valid *)
   ReqHomingOK          : USINT ;                           (* Request Homing OK bit *)
   SafetyActiveSLP      : USINT ;                           (* SLP status bit *)
   SafetyActiveSMP      : USINT ;                           (* SMP status bit *)
   SafeUserData1Active  : USINT ;                           (* SafeUserData1 is active *)
   RSPValid             : USINT ;                           (* RSP Valid bit *)
   StatusSetPosAlive    : USINT ;                           (* Setposition is tested *)
   SafePosition         : DINT ;                            (* Safe position *)
   SafeSpeed            : DINT ;                            (* Safe speed (SafeUserData1, if activated) *)
   reserve1             : UDINT ;                           (* Reserved *)
   reserve2             : UDINT ;                           (* Reserved *)
END_STRUCT;
ACP10SAFEOUTDAT_typ : STRUCT                                (* SafeMC: SafeOUT data *)
   RequestSTO           : USINT ;                           (* STO control bit *)
   RequestSBC           : USINT ;                           (* SBC control bit *)
   RequestSOS           : USINT ;                           (* SOS control bit *)
   RequestSS1           : USINT ;                           (* SS1 control bit *)
   RequestSS2           : USINT ;                           (* SS2 control bit *)
   RequestSLS1          : USINT ;                           (* SLS1 control bit *)
   RequestSLS2          : USINT ;                           (* SLS2 control bit *)
   RequestSLS3          : USINT ;                           (* SLS3 control bit *)
   RequestSLS4          : USINT ;                           (* SLS4 control bit *)
   RequestSTO1          : USINT ;                           (* STO1 control bit *)
   RequestSDIpos        : USINT ;                           (* SDI control bit (positive direction) *)
   RequestSLI           : USINT ;                           (* SLI control bit *)
   RequestSDIneg        : USINT ;                           (* SDI control bit (negative direction) *)
   RequestSLP           : USINT ;                           (* SLP control bit *)
   RequestHoming        : USINT ;                           (* Homing control bit *)
   RequestSwitch        : USINT ;                           (* Switch control bit *)
   RequestSBT           : USINT ;                           (* SBT control bit *)
   RequestSLA           : USINT ;                           (* SLA control bit *)
   SwitchHomingMode     : USINT ;                           (* Switch Homing Mode bit *)
   reserved_ctrl_b19    : USINT ;                           (* reserved_ctrl_b19 *)
   reserved_ctrl_b20    : USINT ;                           (* reserved_ctrl_b20 *)
   reserved_ctrl_b21    : USINT ;                           (* reserved_ctrl_b21 *)
   Activate             : USINT ;                           (* Activation of SafeMC module *)
   Reset                : USINT ;                           (* Reset bit *)
END_STRUCT;
ACP10SAFEOUTDAT2_typ : STRUCT                               (* SafeMC: SafeOUT data2 *)
   Reset                : USINT ;                           (* Reset *)
   Activate             : USINT ;                           (* Activation of SafeMC module *)
   RequestSTO           : USINT ;                           (* STO control bit *)
   RequestSBC           : USINT ;                           (* SBC control bit *)
   RequestSS1           : USINT ;                           (* SS1 control bit *)
   reserved_ctrl_b5     : USINT ;                           (* reserved_ctrl_b5 *)
   RequestSTO1          : USINT ;                           (* STO1 control bit *)
   reserved_ctrl_b7     : USINT ;                           (* reserved_ctrl_b7 *)
   RequestSOS           : USINT ;                           (* SOS control bit *)
   RequestSS2           : USINT ;                           (* SS2 control bit *)
   RequestSLA           : USINT ;                           (* SLA control bit *)
   RequestSLS1          : USINT ;                           (* SLS1 control bit *)
   RequestSLS2          : USINT ;                           (* SLS2 control bit *)
   reserved_ctrl_b13    : USINT ;                           (* reserved_ctrl_b13 *)
   RequestSLS3          : USINT ;                           (* SLS3 control bit *)
   RequestSLS4          : USINT ;                           (* SLS4 control bit *)
   RequestSDIpos        : USINT ;                           (* SDI control bit (positive direction) *)
   RequestSDIneg        : USINT ;                           (* SDI control bit (negative direction) *)
   RequestSLI           : USINT ;                           (* SLI control bit *)
   RequestSBT           : USINT ;                           (* SBT control bit *)
   reserved_ctrl_b20    : USINT ;                           (* reserved_ctrl_b20 *)
   RequestSLT           : USINT ;                           (* SLT control bit *)
   reserved_ctrl_b22    : USINT ;                           (* reserved_ctrl_b22 *)
   reserved_ctrl_b23    : USINT ;                           (* reserved_ctrl_b23 *)
   reserved_ctrl_b24    : USINT ;                           (* reserved_ctrl_b24 *)
   RequestHoming        : USINT ;                           (* Homing control bit *)
   RequestSwitch        : USINT ;                           (* Switch control bit *)
   RequestSLP           : USINT ;                           (* SLP control bit *)
   reserved_ctrl_b28    : USINT ;                           (* reserved_ctrl_b28 *)
   reserved_ctrl_b29    : USINT ;                           (* reserved_ctrl_b29 *)
   SwitchHomingMode     : USINT ;                           (* Switch Homing Mode bit *)
   reserved_ctrl_b31    : USINT ;                           (* reserved_ctrl_b31 *)
END_STRUCT;
ACP10SAFEOUTDAT3_typ : STRUCT                               (* SafeMC: SafeOUT data3 *)
   Reset                : USINT ;                           (* Reset *)
   Activate             : USINT ;                           (* Activation of SafeMC module *)
   RequestSTO           : USINT ;                           (* STO control bit *)
   RequestSBC           : USINT ;                           (* SBC control bit *)
   RequestSS1           : USINT ;                           (* SS1 control bit *)
   reserved_ctrl_b5     : USINT ;                           (* reserved_ctrl_b5 *)
   RequestSTO1          : USINT ;                           (* STO1 control bit *)
   reserved_ctrl_b7     : USINT ;                           (* reserved_ctrl_b7 *)
   RequestSOS           : USINT ;                           (* SOS control bit *)
   RequestSS2           : USINT ;                           (* SS2 control bit *)
   RequestSLA           : USINT ;                           (* SLA control bit *)
   RequestSLS1          : USINT ;                           (* SLS1 control bit *)
   RequestSLS2          : USINT ;                           (* SLS2 control bit *)
   reserved_ctrl_b13    : USINT ;                           (* reserved_ctrl_b13 *)
   RequestSLS3          : USINT ;                           (* SLS3 control bit *)
   RequestSLS4          : USINT ;                           (* SLS4 control bit *)
   RequestSDIpos        : USINT ;                           (* SDI control bit (positive direction) *)
   RequestSDIneg        : USINT ;                           (* SDI control bit (negative direction) *)
   RequestSLI           : USINT ;                           (* SLI control bit *)
   RequestSBT           : USINT ;                           (* SBT control bit *)
   reserved_ctrl_b20    : USINT ;                           (* reserved_ctrl_b20 *)
   RequestSLT           : USINT ;                           (* SLT control bit *)
   RequestSafeUserData1 : USINT ;                           (* SafeUserData1 control bit *)
   reserved_ctrl_b23    : USINT ;                           (* reserved_ctrl_b23 *)
   reserved_ctrl_b24    : USINT ;                           (* reserved_ctrl_b24 *)
   RequestHoming        : USINT ;                           (* Homing control bit *)
   RequestSwitch        : USINT ;                           (* Switch control bit *)
   RequestSLP           : USINT ;                           (* SLP control bit *)
   reserved_ctrl_b28    : USINT ;                           (* reserved_ctrl_b28 *)
   reserved_ctrl_b29    : USINT ;                           (* reserved_ctrl_b29 *)
   SwitchHomingMode     : USINT ;                           (* Switch Homing Mode bit *)
   reserved_ctrl_b31    : USINT ;                           (* reserved_ctrl_b31 *)
   reserve1             : UDINT ;                           (* Reserved *)
END_STRUCT;
ACP10APNWCST_typ : STRUCT                                   (* Status *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
   rx_par_id            : UINT ;                            (* Parameter ID of receive data for coupling functions *)
END_STRUCT;
ACP10APNWCPA_typ : STRUCT                                   (* Parameters *)
   tx_nc_object         : UDINT ;                           (* NC object of send data *)
   tx_par_id            : UINT ;                            (* Parameter ID of send data *)
   tx_nr                : USINT ;                           (* Channel number of send data *)
   rx_nr                : USINT ;                           (* Channel number of receive data *)
   rx_ipl_mode          : USINT ;                           (* Interpolation mode of receive data *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10APNWC_typ : STRUCT                                     (* ACOPOS Network Coupling *)
   status               : ACP10APNWCST_typ ;                (* Status *)
   parameter            : ACP10APNWCPA_typ ;                (* Parameters *)
END_STRUCT;
ACP10_HWIDRIVE_typ : STRUCT                                 (* Hardware Information for drive *)
   model_number         : ARRAY [0..19] OF USINT ;          (* Model number *)
   serial_number        : ARRAY [0..19] OF USINT ;          (* Serial number *)
   revision             : ARRAY [0..3] OF USINT ;           (* Revision *)
   mission_time_end     : UDINT ;                           (* End date of mission time (expiration date) *)
END_STRUCT;
ACP10_HWICARD_typ : STRUCT                                  (* Hardware Information for plug-in card *)
   model_number         : ARRAY [0..19] OF USINT ;          (* Model number *)
   serial_number        : ARRAY [0..19] OF USINT ;          (* Serial number *)
   revision             : ARRAY [0..3] OF USINT ;           (* Revision *)
END_STRUCT;
ACP10_HWIMOTOR_typ : STRUCT                                 (* Hardware Information for motor *)
   model_number         : ARRAY [0..35] OF USINT ;          (* Model number *)
   serial_number        : ARRAY [0..19] OF USINT ;          (* Serial number *)
   revision             : ARRAY [0..3] OF USINT ;           (* Revision *)
END_STRUCT;
ACP10_HWINFO_typ : STRUCT                                   (* ACOPOS Hardware Information *)
   ok                   : USINT ;                           (* Operation complete *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   drive                : ACP10_HWIDRIVE_typ ;              (* Drive *)
   card                 : ARRAY [0..3] OF ACP10_HWICARD_typ ;  (* Plug-in card *)
   motor                : ARRAY [0..2] OF ACP10_HWIMOTOR_typ ;  (* Motor *)
END_STRUCT;
ACP10TYPES_typ : STRUCT                                     (* Data structure for additional data types *)
   data_block           : ACP10DATBL_typ ;                  (* Data block operation *)
   par_recs             : ACP10PRECS_typ ;                  (* Parameter records *)
   read_cob_op          : ACP10UCROP_typ ;                  (* Operate Read COB *)
   network              : ACP10NETGL_typ ;                  (* Network *)
   nc_dat_mod           : ACP10DATMO_typ ;                  (* NC data module *)
   SafeMC_CFG           : ACP10SMCCFG_typ ;                 (* SafeMC Configuration *)
   SafeMC_SafeIN        : ACP10SAFEINDAT_typ ;              (* SafeMC SafeIN data structure *)
   SafeMC_SafeIN2       : ACP10SAFEINDAT2_typ ;             (* SafeMC SafeIN2 data structure *)
   SafeMC_SafeIN3       : ACP10SAFEINDAT3_typ ;             (* SafeMC SafeIN3 data structure *)
   SafeMC_SafeOUT       : ACP10SAFEOUTDAT_typ ;             (* SafeMC SafeOUT data structure *)
   SafeMC_SafeOUT2      : ACP10SAFEOUTDAT2_typ ;            (* SafeMC SafeOUT2 data structure *)
   SafeMC_SafeOUT3      : ACP10SAFEOUTDAT3_typ ;            (* SafeMC SafeOUT3 data structure *)
   acp_nw_coupling      : ACP10APNWC_typ ;                  (* ACOPOS Network Coupling *)
   NOT_USE_1            : ARRAY [0..23] OF USINT ;
   acp_hw_info          : ACP10_HWINFO_typ ;                (* ACOPOS hardware information *)
END_STRUCT;
ACP10USBID_typ : STRUCT                                     (* Basis CAN IDs for User CAN Objects *)
   write_cob            : UINT ;                            (* Write CAN Object *)
   read_cob             : UINT ;                            (* Read CAN Object *)
END_STRUCT;
ACP10WRCOB_typ : STRUCT                                     (* Write CAN Object *)
   can_obj              : UDINT ;                           (* CAN Object (COB handle) from CAN_defineCOB() *)
   status               : UINT ;                            (* Status *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10UCRDF_typ : STRUCT                                     (* Define Read COB *)
   status               : UINT ;                            (* Status *)
   node_nr              : UINT ;                            (* Drive node number *)
   data_adr             : UDINT ;                           (* Data address *)
END_STRUCT;
ACP10UCWSN_typ : STRUCT                                     (* Send Write COB *)
   status               : UINT ;                            (* Status *)
   cob_idx              : USINT ;                           (* COB index *)
   reserve              : USINT ;                           (* Reserved *)
   data_adr             : UDINT ;                           (* Data address *)
END_STRUCT;
ACP10USCOB_typ : STRUCT                                     (* ACP10 - User CAN Objects *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   reserve              : UINT ;                            (* Reserved *)
   sw_version           : ACP10SWVMA_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   if_name              : ARRAY [0..31] OF USINT ;          (* Interface name *)
   basis_id             : ACP10USBID_typ ;                  (* Basis CAN IDs *)
   write_cob            : ARRAY [0..7] OF ACP10WRCOB_typ ;  (* Write CAN Object *)
   read_cob_def         : ACP10UCRDF_typ ;                  (* Define Read COB *)
   write_cob_send       : ACP10UCWSN_typ ;                  (* Send Write COB *)
END_STRUCT;
ACP10VALPA_typ : STRUCT                                     (* Parameters *)
   v_pos                : REAL ;                            (* Speed in positive direction *)
   v_neg                : REAL ;                            (* Speed in negative direction *)
   a1_pos               : REAL ;                            (* Acceleration in positive direction *)
   a2_pos               : REAL ;                            (* Deceleration in positive direction *)
   a1_neg               : REAL ;                            (* Acceleration in negative direction *)
   a2_neg               : REAL ;                            (* Deceleration in negative direction *)
   t_jolt               : REAL ;                            (* Jolt time *)
   t_in_pos             : REAL ;                            (* Settling time before message "In Position" *)
   pos_sw_end           : DINT ;                            (* Positive SW end *)
   neg_sw_end           : DINT ;                            (* Negative SW end *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   ds_warning           : REAL ;                            (* Lag error limit for display of a warning *)
   ds_stop              : REAL ;                            (* Lag error limit for stop of a movement *)
   a_stop               : REAL ;                            (* Acceleration limit for stop of a movement *)
   dv_stop              : REAL ;                            (* Speed error limit for stop of a movement *)
   dv_stop_mode         : UDINT ;                           (* Mode for speed error monitoring *)
END_STRUCT;
ACP10VALIM_typ : STRUCT                                     (* Limit values *)
   init                 : USINT ;                           (* Initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   parameter            : ACP10VALPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10VASTP_typ : STRUCT                                     (* Parameter Records *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   controller           : USINT ;                           (* Controller *)
   reserve              : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10VASTQ_typ : STRUCT                                     (* Quickstop *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   t_jolt               : REAL ;                            (* Jolt time *)
END_STRUCT;
ACP10VASTD_typ : STRUCT                                     (* Drive error *)
   decel_ramp           : USINT ;                           (* Deceleration ramp *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
END_STRUCT;
ACP10VASTO_typ : STRUCT                                     (* Stop Movement *)
   init                 : USINT ;                           (* Initialized *)
   NOT_USE_1            : USINT ;
   reserve2             : UINT ;                            (* Reserved *)
   index                : ACP10AXSTI_typ ;                  (* Index *)
   parameter            : ARRAY [0..3] OF ACP10VASTP_typ ;  (* Parameters *)
   quickstop            : ACP10VASTQ_typ ;                  (* Quickstop *)
   drive_error          : ACP10VASTD_typ ;                  (* Drive error *)
END_STRUCT;
ACP10VAHST_typ : STRUCT                                     (* Status *)
   ok                   : USINT ;                           (* Reference position valid *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   tr_s_rel             : REAL ;                            (* Distance after activation of "triggering reference pulse" *)
   offset               : DINT ;                            (* Offset *)
END_STRUCT;
ACP10VAHPA_typ : STRUCT                                     (* Parameters *)
   s                    : DINT ;                            (* Reference position *)
   v_switch             : REAL ;                            (* Speed for searching the reference switch *)
   v_trigger            : REAL ;                            (* Trigger Speed *)
   a                    : REAL ;                            (* Acceleration *)
   mode                 : USINT ;                           (* Mode *)
   edge                 : USINT ;                           (* Edge of reference switch *)
   start_dir            : USINT ;                           (* Start direction *)
   trigg_dir            : USINT ;                           (* Trigger direction *)
   ref_pulse            : USINT ;                           (* Reference pulse *)
   fix_dir              : USINT ;                           (* Fixed direction *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : USINT ;                           (* Reserved *)
   tr_s_block           : REAL ;                            (* Reference pulse block distance *)
   torque_lim           : REAL ;                            (* Torque limit for homing on block *)
   ds_block             : REAL ;                            (* Lag error for block detection *)
   ds_stop              : REAL ;                            (* Lag error for stop of a movement *)
END_STRUCT;
ACP10VAHOM_typ : STRUCT                                     (* Homing *)
   init                 : USINT ;                           (* Initialized *)
   reserve1             : USINT ;                           (* Reserved *)
   reserve2             : UINT ;                            (* Reserved *)
   status               : ACP10VAHST_typ ;                  (* Status *)
   parameter            : ACP10VAHPA_typ ;                  (* Parameters *)
END_STRUCT;
ACP10VAMOV_typ : STRUCT                                     (* Movement *)
   mode                 : UINT ;                            (* Mode *)
   detail               : UINT ;                            (* Detail *)
   stop                 : ACP10VASTO_typ ;                  (* Stop Movement *)
   homing               : ACP10VAHOM_typ ;                  (* Homing procedure *)
   basis                : ACP10BAMOV_typ ;                  (* Basis state *)
END_STRUCT;
ACP10VAMSCMDE_typ : STRUCT                                  (* Command: Execute error reaction *)
   type                 : UINT ;                            (* Type *)
   ok                   : USINT ;                           (* Operation complete *)
   error                : USINT ;                           (* Error *)
END_STRUCT;
ACP10VAMSG_typ : STRUCT                                     (* Messages *)
   count                : ACP10MSCNT_typ ;                  (* Count *)
   record               : ACP10MSREC_typ ;                  (* Error record *)
   text                 : ACP10MSTXT_typ ;                  (* Error text *)
   cmd_error            : ACP10VAMSCMDE_typ ;               (* Command: Execute error reaction *)
END_STRUCT;
ACP10VAXIS_typ : STRUCT                                     (* ACP10 - Virtual Axis *)
   NOT_USE_1            : ARRAY [0..3] OF USINT ;
   size                 : UINT ;                            (* Size of the corresponding NC manager data type *)
   NOT_USE_2            : ARRAY [0..1] OF USINT ;
   sw_version           : ACP10SWVER_typ ;                  (* SW Version ID [hexadecimal] *)
   nc_obj_inf           : ACP10OBINF_typ ;                  (* NC Object Information *)
   simulation           : ACP10SIM_typ ;                    (* Simulation Mode *)
   global               : ACP10GLINI_typ ;                  (* Global Parameters *)
   network              : ACP10NET_typ ;                    (* Network *)
   datblock             : ACP10AXDBL_typ ;                  (* Data block operation *)
   dig_in               : ACP10DIGIN_typ ;                  (* Digital Inputs *)
   encoder_if           : ACP10ENCIF_typ ;                  (* Encoder Interface *)
   limit                : ACP10VALIM_typ ;                  (* Limit value *)
   controller           : ACP10CTRL_typ ;                   (* Controller *)
   move                 : ACP10VAMOV_typ ;                  (* Movement *)
   setup                : ACP10SETUP_typ ;                  (* Setup *)
   monitor              : ACP10AXMON_typ ;                  (* Monitor *)
   message              : ACP10VAMSG_typ ;                  (* Messages (errors, warnings) *)
   nc_test              : ACP10NCTST_typ ;                  (* NC Test *)
   NOT_USE_3            : ARRAY [0..59] OF USINT ;
END_STRUCT;
END_TYPE
