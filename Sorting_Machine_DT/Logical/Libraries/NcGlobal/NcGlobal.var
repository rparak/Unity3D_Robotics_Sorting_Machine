VAR CONSTANT
    BASIS2005                          :UINT     := 1;            (* System 2005 basis rack *)
    FAST_BOOT                          :UINT     := 16#4000;      (* Fast boot of DM455 *)
    FB_MC_AbortTrigger                 :UINT     := 2;            (* FB MC_AbortTrigger *)
    FB_MC_BR_AutCommand                :UINT     := 99;           (* FB MC_BR_AutCommand *)
    FB_MC_BR_AutControl                :UINT     := 3;            (* FB MC_BR_AutControl *)
    FB_MC_BR_AutoCamDwell              :UINT     := 65;           (* FB MC_BR_AutoCamDwell *)
    FB_MC_BR_AxisErrorCollector        :UINT     := 104;          (* FB MC_BR_AxisErrorCollector *)
    FB_MC_BR_BrakeControl              :UINT     := 110;          (* FB MC_BR_BrakeControl *)
    FB_MC_BR_BrakeOperation            :UINT     := 4;            (* FB MC_BR_BrakeOperation *)
    FB_MC_BR_CalcCamFromPoints         :UINT     := 93;           (* FB MC_BR_CalcCamFromPoints *)
    FB_MC_BR_CalcCamFromSections       :UINT     := 73;           (* FB MC_BR_CalcCamFromSections *)
    FB_MC_BR_CalcPointsFromCam         :UINT     := 123;          (* FB MC_BR_CalcPointsFromCam *)
    FB_MC_BR_CalcSectionsFromCam       :UINT     := 122;          (* FB MC_BR_CalcSectionsFromCam *)
    FB_MC_BR_CamDwell                  :UINT     := 64;           (* FB MC_BR_CamDwell *)
    FB_MC_BR_CamIn                     :UINT     := 146;          (* FB MC_BR_CamIn *)
    FB_MC_BR_CamTransition             :UINT     := 94;           (* FB MC_BR_CamTransition *)
    FB_MC_BR_CheckAutCompensation      :UINT     := 103;          (* FB MC_BR_CheckAutCompensation *)
    FB_MC_BR_CheckEndlessPosition      :UINT     := 130;          (* FB MC_BR_CheckEndlessPosition *)
    FB_MC_BR_CommandError              :UINT     := 140;          (* FB MC_BR_CommandError *)
    FB_MC_BR_ConfigPowerStageCheck     :UINT     := 137;          (* FB MC_BR_ConfigPowerStageCheck *)
    FB_MC_BR_CreateCamProfileObj       :UINT     := 74;           (* FB MC_BR_CreateCamProfileObj *)
    FB_MC_BR_CrossCutterControl        :UINT     := 114;          (* FB MC_BR_CrossCutterControl *)
    FB_MC_BR_CyclicRead                :UINT     := 69;           (* FB MC_BR_CyclicRead *)
    FB_MC_BR_CyclicReadDataInfo        :UINT     := 98;           (* FB MC_BR_CyclicReadDataInfo *)
    FB_MC_BR_CyclicWrite               :UINT     := 70;           (* FB MC_BR_CyclicWrite *)
    FB_MC_BR_DigitalCamSwitch          :UINT     := 106;          (* FB MC_BR_DigitalCamSwitch *)
    FB_MC_BR_DownloadCamProfileData    :UINT     := 5;            (* FB MC_BR_DownloadCamProfileData *)
    FB_MC_BR_DownloadCamProfileObj     :UINT     := 6;            (* FB MC_BR_DownloadCamProfileObj *)
    FB_MC_BR_DownloadParSequ           :UINT     := 7;            (* FB MC_BR_DownloadParSequ *)
    FB_MC_BR_EventMoveAbsolute         :UINT     := 61;           (* FB MC_BR_EventMoveAbsolute *)
    FB_MC_BR_EventMoveAdditive         :UINT     := 62;           (* FB MC_BR_EventMoveAdditive *)
    FB_MC_BR_EventMoveVelocity         :UINT     := 63;           (* FB MC_BR_EventMoveVelocity *)
    FB_MC_BR_GearIn                    :UINT     := 126;          (* FB MC_BR_GearIn *)
    FB_MC_BR_GetCamMasterPosition      :UINT     := 86;           (* FB MC_BR_GetCamMasterPosition *)
    FB_MC_BR_GetCamSlavePosition       :UINT     := 85;           (* FB MC_BR_GetCamSlavePosition *)
    FB_MC_BR_GetErrorText              :UINT     := 77;           (* FB MC_BR_GetErrorText *)
    FB_MC_BR_GetHardwareInfo           :UINT     := 109;          (* FB MC_BR_GetHardwareInfo *)
    FB_MC_BR_GetParIDInfo              :UINT     := 107;          (* FB MC_BR_GetParIDInfo *)
    FB_MC_BR_GetParIDTransferInfo      :UINT     := 121;          (* FB MC_BR_GetParIDTransferInfo *)
    FB_MC_BR_HomeAcpEncoder            :UINT     := 68;           (* FB MC_BR_HomeAcpEncoder *)
    FB_MC_BR_InitAutData               :UINT     := 76;           (* FB MC_BR_InitAutData *)
    FB_MC_BR_InitAutEvent              :UINT     := 8;            (* FB MC_BR_InitAutEvent *)
    FB_MC_BR_InitAutPar                :UINT     := 9;            (* FB MC_BR_InitAutPar *)
    FB_MC_BR_InitAutState              :UINT     := 10;           (* FB MC_BR_InitAutState *)
    FB_MC_BR_InitAxisPar               :UINT     := 54;           (* FB MC_BR_InitAxisPar *)
    FB_MC_BR_InitAxisSubjectPar        :UINT     := 57;           (* FB MC_BR_InitAxisSubjectPar *)
    FB_MC_BR_InitCyclicRead            :UINT     := 11;           (* FB MC_BR_InitCyclicRead *)
    FB_MC_BR_InitCyclicWrite           :UINT     := 12;           (* FB MC_BR_InitCyclicWrite *)
    FB_MC_BR_InitEndlessPosAcpEnc      :UINT     := 138;          (* FB MC_BR_InitEndlessPosAcpEnc *)
    FB_MC_BR_InitEndlessPosition       :UINT     := 82;           (* FB MC_BR_InitEndlessPosition *)
    FB_MC_BR_InitMasterParIDTransfer   :UINT     := 13;           (* FB MC_BR_InitMasterParIDTransfer *)
    FB_MC_BR_InitModPos                :UINT     := 14;           (* FB MC_BR_InitModPos *)
    FB_MC_BR_InitParList               :UINT     := 15;           (* FB MC_BR_InitParList *)
    FB_MC_BR_InitParSequ               :UINT     := 16;           (* FB MC_BR_InitParSequ *)
    FB_MC_BR_InitParTabObj             :UINT     := 17;           (* FB MC_BR_InitParTabObj *)
    FB_MC_BR_InitReceiveNetworkData    :UINT     := 115;          (* FB MC_BR_InitReceiveNetworkData *)
    FB_MC_BR_InitReceiveNetworkEnc     :UINT     := 141;          (* FB MC_BR_InitReceiveNetworkEnc *)
    FB_MC_BR_InitReceiveParID          :UINT     := 112;          (* FB MC_BR_InitReceiveParID *)
    FB_MC_BR_InitSendParID             :UINT     := 111;          (* FB MC_BR_InitSendParID *)
    FB_MC_BR_JogLimitPosition          :UINT     := 119;          (* FB MC_BR_JogLimitPosition *)
    FB_MC_BR_JogTargetPosition         :UINT     := 120;          (* FB MC_BR_JogTargetPosition *)
    FB_MC_BR_JogVelocity               :UINT     := 118;          (* FB MC_BR_JogVelocity *)
    FB_MC_BR_LimitLoad                 :UINT     := 134;          (* FB MC_BR_LimitLoad *)
    FB_MC_BR_LimitLoadCam              :UINT     := 135;          (* FB MC_BR_LimitLoadCam *)
    FB_MC_BR_LoadAxisPar               :UINT     := 56;           (* FB MC_BR_LoadAxisPar *)
    FB_MC_BR_MechPosDeviationComp      :UINT     := 147;          (* FB MC_BR_MechPosDeviationComp *)
    FB_MC_BR_MoveAbsoluteTriggStop     :UINT     := 18;           (* FB MC_BR_MoveAbsoluteTriggStop *)
    FB_MC_BR_MoveAdditiveTriggStop     :UINT     := 19;           (* FB MC_BR_MoveAdditiveTriggStop *)
    FB_MC_BR_MoveCyclicPosition        :UINT     := 84;           (* FB MC_BR_MoveCyclicPosition *)
    FB_MC_BR_MoveCyclicPositionExt     :UINT     := 124;          (* FB MC_BR_MoveCyclicPositionExt *)
    FB_MC_BR_MoveCyclicVelocity        :UINT     := 92;           (* FB MC_BR_MoveCyclicVelocity *)
    FB_MC_BR_MoveCyclicVelocityExt     :UINT     := 125;          (* FB MC_BR_MoveCyclicVelocityExt *)
    FB_MC_BR_MoveVelocityTriggStop     :UINT     := 20;           (* FB MC_BR_MoveVelocityTriggStop *)
    FB_MC_BR_NetTrace                  :UINT     := 78;           (* FB MC_BR_NetTrace *)
    FB_MC_BR_NetworkInit               :UINT     := 139;          (* FB MC_BR_NetworkInit *)
    FB_MC_BR_Offset                    :UINT     := 58;           (* FB MC_BR_Offset *)
    FB_MC_BR_OffsetVelocity            :UINT     := 127;          (* FB MC_BR_OffsetVelocity *)
    FB_MC_BR_OffsetZone                :UINT     := 128;          (* FB MC_BR_OffsetZone *)
    FB_MC_BR_ParTrace                  :UINT     := 80;           (* FB MC_BR_ParTrace *)
    FB_MC_BR_ParTraceConfig            :UINT     := 102;          (* FB MC_BR_ParTraceConfig *)
    FB_MC_BR_Phasing                   :UINT     := 59;           (* FB MC_BR_Phasing *)
    FB_MC_BR_PowerMeter                :UINT     := 89;           (* FB MC_BR_PowerMeter *)
    FB_MC_BR_ReadAutPosition           :UINT     := 75;           (* FB MC_BR_ReadAutPosition *)
    FB_MC_BR_ReadAxisError             :UINT     := 105;          (* FB MC_BR_ReadAxisError *)
    FB_MC_BR_ReadCyclicPosition        :UINT     := 83;           (* FB MC_BR_ReadCyclicPosition *)
    FB_MC_BR_ReadDriveStatus           :UINT     := 72;           (* FB MC_BR_ReadDriveStatus *)
    FB_MC_BR_ReadLoadSimInputData      :UINT     := 131;          (* FB MC_BR_ReadLoadSimInputData *)
    FB_MC_BR_ReadLoadSimTorque         :UINT     := 142;          (* FB MC_BR_ReadLoadSimTorque *)
    FB_MC_BR_ReadNetTraceStatus        :UINT     := 79;           (* FB MC_BR_ReadNetTraceStatus *)
    FB_MC_BR_ReadParID                 :UINT     := 21;           (* FB MC_BR_ReadParID *)
    FB_MC_BR_ReadParIDText             :UINT     := 90;           (* FB MC_BR_ReadParIDText *)
    FB_MC_BR_ReadParList               :UINT     := 148;          (* FB MC_BR_ReadParList *)
    FB_MC_BR_ReadParTraceStatus        :UINT     := 81;           (* FB MC_BR_ReadParTraceStatus *)
    FB_MC_BR_ReceiveParIDOnPLC         :UINT     := 113;          (* FB MC_BR_ReceiveParIDOnPLC *)
    FB_MC_BR_RegMarkCalc001            :UINT     := 67;           (* FB MC_BR_RegMarkCalc001 *)
    FB_MC_BR_RegMarkCapture001         :UINT     := 66;           (* FB MC_BR_RegMarkCapture001 *)
    FB_MC_BR_RegMarkCapture002         :UINT     := 117;          (* FB MC_BR_RegMarkCapture002 *)
    FB_MC_BR_ResetAutPar               :UINT     := 136;          (* FB MC_BR_ResetAutPar *)
    FB_MC_BR_SaveAxisPar               :UINT     := 55;           (* FB MC_BR_SaveAxisPar *)
    FB_MC_BR_SaveCamProfileObj         :UINT     := 116;          (* FB MC_BR_SaveCamProfileObj *)
    FB_MC_BR_SetHardwareInputs         :UINT     := 108;          (* FB MC_BR_SetHardwareInputs *)
    FB_MC_BR_SetupController           :UINT     := 88;           (* FB MC_BR_SetupController *)
    FB_MC_BR_SetupFromParTabObj        :UINT     := 145;          (* FB MC_BR_SetupFromParTabObj *)
    FB_MC_BR_SetupInductionMotor       :UINT     := 87;           (* FB MC_BR_SetupInductionMotor *)
    FB_MC_BR_SetupIsqRipple            :UINT     := 101;          (* FB MC_BR_SetupIsqRipple *)
    FB_MC_BR_SetupMotorPhasing         :UINT     := 97;           (* FB MC_BR_SetupMotorPhasing *)
    FB_MC_BR_SetupSynchronMotor        :UINT     := 129;          (* FB MC_BR_SetupSynchronMotor *)
    FB_MC_BR_Simulation                :UINT     := 71;           (* FB MC_BR_Simulation *)
    FB_MC_BR_TorqueControl             :UINT     := 100;          (* FB MC_BR_TorqueControl *)
    FB_MC_BR_TouchProbe                :UINT     := 60;           (* FB MC_BR_TouchProbe *)
    FB_MC_BR_VelocityControl           :UINT     := 95;           (* FB MC_BR_VelocityControl *)
    FB_MC_BR_WriteLoadSimOutputData    :UINT     := 132;          (* FB MC_BR_WriteLoadSimOutputData *)
    FB_MC_BR_WriteLoadSimPosition      :UINT     := 143;          (* FB MC_BR_WriteLoadSimPosition *)
    FB_MC_BR_WriteLoadSimTorque        :UINT     := 144;          (* FB MC_BR_WriteLoadSimTorque *)
    FB_MC_BR_WriteLoadSimTwoEncPos     :UINT     := 149;          (* FB MC_BR_WriteLoadSimTwoEncPos *)
    FB_MC_BR_WriteParID                :UINT     := 22;           (* FB MC_BR_WriteParID *)
    FB_MC_BR_WriteParIDText            :UINT     := 91;           (* FB MC_BR_WriteParIDText *)
    FB_MC_CamIn                        :UINT     := 23;           (* FB MC_CamIn *)
    FB_MC_CamOut                       :UINT     := 24;           (* FB MC_CamOut *)
    FB_MC_CamTableSelect               :UINT     := 25;           (* FB MC_CamTableSelect *)
    FB_MC_DigitalCamSwitch             :UINT     := 26;           (* FB MC_DigitalCamSwitch *)
    FB_MC_GearIn                       :UINT     := 27;           (* FB MC_GearIn *)
    FB_MC_GearInPos                    :UINT     := 28;           (* FB MC_GearInPos *)
    FB_MC_GearOut                      :UINT     := 29;           (* FB MC_GearOut *)
    FB_MC_Halt                         :UINT     := 30;           (* FB MC_Halt *)
    FB_MC_Home                         :UINT     := 31;           (* FB MC_Home *)
    FB_MC_LimitLoad                    :UINT     := 133;          (* FB MC_LimitLoad *)
    FB_MC_MoveAbsolute                 :UINT     := 32;           (* FB MC_MoveAbsolute *)
    FB_MC_MoveAdditive                 :UINT     := 33;           (* FB MC_MoveAdditive *)
    FB_MC_MoveRelative                 :UINT     := 34;           (* FB MC_MoveRelative *)
    FB_MC_MoveVelocity                 :UINT     := 35;           (* FB MC_MoveVelocity *)
    FB_MC_Phasing                      :UINT     := 36;           (* FB MC_Phasing *)
    FB_MC_Power                        :UINT     := 37;           (* FB MC_Power *)
    FB_MC_ReadActualPosition           :UINT     := 39;           (* FB MC_ReadActualPosition *)
    FB_MC_ReadActualTorque             :UINT     := 38;           (* FB MC_ReadActualTorque *)
    FB_MC_ReadActualVelocity           :UINT     := 40;           (* FB MC_ReadActualVelocity *)
    FB_MC_ReadAxisError                :UINT     := 41;           (* FB MC_ReadAxisError *)
    FB_MC_ReadBoolParameter            :UINT     := 42;           (* FB MC_ReadBoolParameter *)
    FB_MC_ReadDigitalInput             :UINT     := 43;           (* FB MC_ReadDigitalInput *)
    FB_MC_ReadDigitalOutput            :UINT     := 44;           (* FB MC_ReadDigitalOutput *)
    FB_MC_ReadParameter                :UINT     := 45;           (* FB MC_ReadParameter *)
    FB_MC_ReadStatus                   :UINT     := 46;           (* FB MC_ReadStatus *)
    FB_MC_Reset                        :UINT     := 47;           (* FB MC_Reset *)
    FB_MC_SetOverride                  :UINT     := 48;           (* FB MC_SetOverride *)
    FB_MC_Stop                         :UINT     := 49;           (* FB MC_Stop *)
    FB_MC_TorqueControl                :UINT     := 96;           (* FB MC_TorqueControl *)
    FB_MC_TouchProbe                   :UINT     := 50;           (* FB MC_TouchProbe *)
    FB_MC_WriteBoolParameter           :UINT     := 51;           (* FB MC_WriteBoolParameter *)
    FB_MC_WriteDigitalOutput           :UINT     := 52;           (* FB MC_WriteDigitalOutput *)
    FB_MC_WriteParameter               :UINT     := 53;           (* FB MC_WriteParameter *)
    IO_2005                            :UINT     := 16#0480;      (* I/O module in system 2005 *)
    IO_2010                            :UINT     := 16#0400;      (* I/O module in system 2010 *)
    MC_InitFunction                    :UINT     := 1;            (* INIT function of MC library *)
    MOD_UPDATE                         :UINT     := 16#8000;      (* Update all SW modules of DM455 *)
    nc100KHZ                           :USINT    := 1;            (* 100 kHz *)
    nc154CAN                           :UINT     := 5;            (* CAN for NC154 *)
    nc156CAN                           :UINT     := 6;            (* CAN for NC156 *)
    nc157CAN                           :UINT     := 9;            (* CAN for NC157 *)
    nc158CAN                           :UINT     := 7;            (* CAN for NC158 *)
    nc20KHZ                            :USINT    := 0;            (* 20 kHz *)
    nc2ENCOD_SPEED                     :UINT     := 5;            (* 2-encoder speed *)
    ncA_LIMIT                          :USINT    := 20;           (* With the deceleration defined within the axis limit values *)
    ncA_MOVE                           :USINT    := 10;           (* With the deceleration defined for the current movement *)
    ncABORT_DATA                       :USINT    := 8;            (* Restart data saved at program abort *)
    ncABORT_LINE                       :USINT    := 4;            (* Position at the beginning of the abort line *)
    ncABOVE_WINDOW                     :USINT    := 40;           (* Area "Above the window" *)
    ncABS                              :USINT    := 1;            (* Absolute *)
    ncABS_MOVE                         :UINT     := 132;          (* Move with absolute target position *)
    ncABS_SWITCH                       :USINT    := 2;            (* With absolute reference switch *)
    ncABSOLUTE                         :USINT    := 0;            (* Absolute *)
    ncACCEL                            :USINT    := 1;            (* Acceleration *)
    ncACK                              :UINT     := 16#0101;      (* Acknowledge *)
    ncACKNOWLEDGE                      :UINT     := 16#0101;      (* Acknowledge *)
    ncACOPOS_1                         :USINT    := 0;            (* ACOPOS-1 *)
    ncACOPOS_2                         :USINT    := 1;            (* ACOPOS-2 *)
    ncACOPOS_INFO                      :UINT     := 16#0142;      (* Determine ACOPOS info *)
    ncACOPOS_P3                        :USINT    := 12;           (* ACOPOS P3 *)
    ncACOPOS_SDC                       :USINT    := 128;          (* ACOPOS at SDC Interface *)
    ncACOPOS_SIM                       :USINT    := 129;          (* ACOPOS simulation *)
    ncACOPOSmicro                      :USINT    := 7;            (* ACOPOSmicro *)
    ncACOPOSmotor                      :USINT    := 4;            (* ACOPOSmotor *)
    ncACOPOSmotor_C                    :USINT    := 18;           (* ACOPOSmotor *)
    ncACOPOSmulti                      :USINT    := 5;            (* ACOPOSmulti *)
    ncACOPOSmulti_PPS                  :USINT    := 6;            (* ACOPOSmulti PPS *)
    ncACOPOSmulti3                     :USINT    := 9;            (* ACOPOSmulti3 *)
    ncACOPOSmulti65                    :USINT    := 8;            (* ACOPOSmulti65 *)
    ncACOPOSmulti65m                   :USINT    := 4;            (* ACOPOSmulti65m *)
    ncACOPOSremote                     :USINT    := 8;            (* ACOPOSremote *)
    ncACP_PAR                          :UINT     := 401;          (* ACOPOS Parameter Data *)
    ncACP_PAR_INIT_BRC_DP              :UINT     := 16#0163;      (* ACOPOS Parameter Data: Initialize broadcast data point *)
    ncACP_PAR_INIT_BRC_DP64            :UINT     := 16#0162;      (* ACOPOS Parameter Data: Initialize 64 bit broadcast data point *)
    ncACP_PAR_RECEIVE                  :UINT     := 16#0161;      (* Receive ACOPOS parameter data *)
    ncACP_PAR_SEND                     :UINT     := 16#0160;      (* Send ACOPOS parameter data *)
    ncACP_SIM_COMPLETE                 :USINT    := 2;            (* ACOPOS simulation: Complete *)
    ncACP_SIM_STANDARD                 :USINT    := 1;            (* ACOPOS simulation: Standard *)
    ncACP_TYP_INV                      :USINT    := 1;            (* Inverter module *)
    ncACP_TYP_PPS                      :USINT    := 2;            (* Passive Power Supply module *)
    ncACP_TYP_PS                       :USINT    := 0;            (* Active Power Supply module *)
    ncACP_TYP_SDC                      :USINT    := 128;          (* Module at SDC interface *)
    ncACP_TYP_SIM                      :USINT    := 129;          (* ACOPOS simulation *)
    ncACP10MAN                         :UINT     := 16#8000;      (* ACP10 Manager *)
    ncACP10USCOB                       :UINT     := 16#00ff;      (* ACP10 SW: User CAN Objects *)
    ncACT_POS                          :UINT     := 120;          (* Actual position for coupling *)
    ncACTIV_HI                         :USINT    := 1;            (* Active high *)
    ncACTIV_LO                         :USINT    := 0;            (* Active low *)
    ncACTIVE                           :UINT     := 1;            (* Active *)
    ncADD_DATE_TIME                    :UINT     := 1;            (* Zeit und Datum addieren *)
    ncAIL_DUMP                         :UINT     := 220;          (* AIL dump *)
    ncALL                              :UINT     := 16#0175;      (* All *)
    ncANALOG                           :USINT    := 0;            (* Analog *)
    ncAND_N2E                          :USINT    := 15;           (* AND operation of next 2 events *)
    ncARNC0MAN                         :UINT     := 16#9000;      (* ARNC0 Manager *)
    ncAT_ONCE                          :USINT    := 0;            (* At once *)
    ncAUT_END                          :USINT    := 10;           (* Automat end *)
    ncAUTO                             :USINT    := 1;            (* Automatic mode *)
    ncAUTOMAT                          :UINT     := 122;          (* Automat *)
    ncAUTOSAVE                         :USINT    := 64;           (* Automatic save *)
    ncAXES                             :UINT     := 213;          (* Axis settings *)
    ncAXIS                             :UINT     := 1;            (* Axis *)
    ncBASIS                            :USINT    := 1;            (* Basis state *)
    ncBASIS_MOVE                       :UINT     := 130;          (* Basis move *)
    ncBASIS_TRG_STOP                   :UINT     := 137;          (* Mode "Stop after trigger" for basis movements *)
    ncBELOW_WINDOW                     :USINT    := 50;           (* Area "Below the window" *)
    ncBIDIR                            :USINT    := 4;            (* Spindle slope error compensation bi-directional *)
    ncBINARY                           :USINT    := 1;            (* Binary code *)
    ncBIQUAD                           :UINT     := 9;            (* Biquad *)
    ncBISS                             :USINT    := 9;            (* BISS encoder *)
    ncBL                               :USINT    := 1;            (* Backlash compensation *)
    ncBLOCK                            :UINT     := 202;          (* CNC block *)
    ncBLOCK_DS                         :USINT    := 10;           (* On block with lag error  limit as condition for "block reached" *)
    ncBLOCK_TORQUE                     :USINT    := 9;            (* On block with torque limit as condition for "block reached" *)
    ncBLOCKMON                         :UINT     := 16#0173;      (* Block monitor *)
    ncBLOCKMONITOR                     :USINT    := 16#04;        (* Block monitor for start mode ncFILE_XL *)
    ncBLOCKNUMBER                      :USINT    := 1;            (* Position at block number *)
    ncBLOCKSEARCH                      :UINT     := 16#0115;      (* Blocksearch *)
    ncBRAKE                            :UINT     := 171;          (* Brake *)
    ncBREAK                            :UINT     := 2;            (* Word break *)
    ncBREAKPOINT                       :UINT     := 16#0172;      (* Breakpoint *)
    ncBURN                             :UINT     := 16#0154;      (* Burn *)
    ncBYTEOFFSET                       :USINT    := 3;            (* Byte offset *)
    ncCALCULATION                      :UINT     := 11;           (* Calculation *)
    ncCAM_BEG                          :USINT    := 6;            (* Beginning of a Cam Profile *)
    ncCAM_PROF                         :UINT     := 117;          (* Cam profile *)
    ncCAMPRDAT                         :USINT    := 24;           (* Cam profile data (table) *)
    ncCAMPRPOL                         :USINT    := 25;           (* Cam profile data (polynomial) *)
    ncCAMPRPOL_ACOPOS                  :USINT    := 27;           (* Cam profile data (polynomial) for ACOPOS *)
    ncCAN_IF                           :UINT     := 16#0000;      (* CAN interface *)
    ncCLOSED                           :USINT    := 1;            (* Closed *)
    ncCMD_ERROR                        :UINT     := 16#0119;      (* Command: Execute error reaction *)
    ncCMD_ERROR_COAST_TO_STANDSTILL    :UINT     := 5;            (* Error, coast to standstill (with controller OFF) *)
    ncCMD_ERROR_INDUCTION_HALT         :UINT     := 6;            (* Error, induction halt (with controller OFF) *)
    ncCMD_ERROR_ONLY                   :UINT     := 1;            (* Error only *)
    ncCMD_ERROR_STOP                   :UINT     := 2;            (* Error and movement stop *)
    ncCMD_ERROR_STOP_CTRL_OFF          :UINT     := 3;            (* Error, movement stop and controller OFF *)
    ncCMD_ERROR_V_STOP_CTRL_OFF        :UINT     := 4;            (* Error, movement stop (with speed ramp) and controller OFF *)
    ncCMD_WARNING_ONLY                 :UINT     := 0;            (* Warning only *)
    ncCNC                              :USINT    := 0;            (* CNC axis (cartesian contour axis) *)
    ncCNC_C_AX                         :UINT     := 199;          (* CNC system as coupling axis *)
    ncCNC_PLC                          :UINT     := 212;          (* CNC PLC data *)
    ncCNC_PROG                         :USINT    := 20;           (* CNC program *)
    ncCNCSYS                           :UINT     := 2;            (* CNC system *)
    ncCOMP                             :UINT     := 125;          (* Axis compensation *)
    ncCOMP_ERR                         :USINT    := 14;           (* Compensation gears error *)
    ncCOMPAR                           :UINT     := 115;          (* Comparator *)
    ncCONTINUE                         :UINT     := 16#0107;      (* Continue *)
    ncCONTINUE_                        :UINT     := 16#0107;      (* Continue *)
    ncCONTROL                          :UINT     := 105;          (* Controller *)
    ncCONTROLLER                       :UINT     := 105;          (* Controller *)
    ncCORRECTION                       :USINT    := 16#80;        (* Correction *)
    ncCOUNT                            :USINT    := 11;           (* Count *)
    ncCOUPLING                         :UINT     := 16#0112;      (* Coupling configuration *)
    ncCSTRF                            :USINT    := 1;            (* Coordinate system transformation *)
    ncCTRL_OFF                         :USINT    := 50;           (* Switch off power section immediately (the drive has no electrical torque) *)
    ncCYCL_USER_FRDRV                  :UINT     := 16#0101;      (* Cyclic user data from the drive *)
    ncCYCL_USER_FRDRV_AT_STARTUP       :UINT     := 16#0103;      (* Cyclic user data from the drive (at startup) *)
    ncCYCL_USER_TODRV                  :UINT     := 16#0100;      (* Cyclic user data to the drive *)
    ncCYCL_USER_TODRV_AT_STARTUP       :UINT     := 16#0102;      (* Cyclic user data to the drive (at startup) *)
    ncCYCLIC                           :USINT    := 8;            (* Cyclic *)
    ncD_POS                            :USINT    := 13;           (* Delta position *)
    ncD_SINGLE                         :UINT     := 207;          (* Decoder single step operating mode *)
    ncDAT_MOD                          :UINT     := 301;          (* Data module *)
    ncDATA                             :USINT    := 0;            (* Data *)
    ncDATA_TEXT                        :UINT     := 16#0400;      (* Data text *)
    ncDATBLOCK                         :UINT     := 162;          (* Data block *)
    ncDATMOD_ACP_CAM_POLY              :USINT    := 27;           (* NC data module: ACOPOS Cam Profile (polynomial) *)
    ncDATMOD_ACP_PAR                   :USINT    := 16;           (* NC data module: ACOPOS Parameter table *)
    ncDATMOD_ACP_PAR_TRACE             :USINT    := 31;           (* NC data module: ACOPOS Parameter Trace *)
    ncDATMOD_CNC_CAM_POLY              :USINT    := 25;           (* NC data module: CNC Cam Profile (polynomial) *)
    ncDATMOD_CNC_CAM_TAB               :USINT    := 24;           (* NC data module: CNC Cam Profile (table) *)
    ncDATMOD_CNC_PROG                  :USINT    := 20;           (* NC data module: CNC Program *)
    ncDATMOD_CNC_R_PAR                 :USINT    := 23;           (* NC data module: CNC R Parameter table *)
    ncDATMOD_CNC_TOOL                  :USINT    := 22;           (* NC data module: CNC Tool Data table *)
    ncDATMOD_DATBLOCK                  :USINT    := 33;           (* NC data module: Data block *)
    ncDATMOD_NC_MAPPING                :USINT    := 28;           (* NC data module: NC Mapping table *)
    ncDATMOD_NET_TRACE                 :USINT    := 30;           (* NC data module: Network Trace *)
    ncDATMOD_ZERO_P_OFF                :USINT    := 21;           (* NC data module: CNC Zero Point table *)
    ncDATOBJ_BRMOD                     :UINT     := 0;            (* Data object with type "BR module" *)
    ncDATOBJ_BRMOD_DEFAULT             :UINT     := 65535;        (* Data object with type "BR module" with default name *)
    ncDATOBJ_FILE                      :UINT     := 1;            (* Data object with type "File" *)
    ncDATOBJ_FORMAT_BIN                :UINT     := 0;            (* Binary format *)
    ncDATOBJ_FORMAT_CSV                :UINT     := 1;            (* CSV format *)
    ncDATOBJ_FORMAT_TXT                :UINT     := 2;            (* Text format *)
    ncDCM                              :USINT    := 7;            (* Distance coded reference mark *)
    ncDECEL                            :USINT    := 4;            (* Deceleration *)
    ncDECODER                          :UINT     := 206;          (* Decoder *)
    ncDEFINE                           :UINT     := 16#0171;      (* Define *)
    ncDELETE                           :UINT     := 16#0156;      (* Delete *)
    ncDIAGNOSE                         :UINT     := 16#0141;      (* Determine diagnosis info *)
    ncDIG_IN                           :UINT     := 102;          (* Digital inputs *)
    ncDIRECT                           :USINT    := 0;            (* Direct *)
    ncDM16BIT                          :UINT     := 16#2000;      (* Standardization to 16 Bit value for DM455 *)
    ncDNC                              :USINT    := 2;            (* DNC interface *)
    ncDOWNLOAD                         :UINT     := 16#0153;      (* Download *)
    ncDPR_OVR                          :UINT     := 217;          (* DPR override *)
    ncDPR_TRACE                        :UINT     := 306;          (* Command Trace *)
    ncDRAM                             :USINT    := 65;           (* DRAM *)
    ncDRIVE                            :UINT     := 166;          (* Drive *)
    ncDRIVE_ID                         :UINT     := 123;          (* Drive identification *)
    ncDRIVE_IF                         :UINT     := 104;          (* Drive interface *)
    ncDRIVE_READY                      :USINT    := 255;          (* Drive ready *)
    ncDV_STOP_AUTO1                    :UDINT    := 2;            (* Calculate "AXLIM_DV_STOP" automatically mode1 *)
    ncDV_STOP_AUTO2                    :UDINT    := 3;            (* Calculate "AXLIM_DV_STOP" automatically mode2 *)
    ncDV_STOP_INIT                     :UDINT    := 1;            (* Initialize "AXLIM_DV_STOP" with "dv_stop" *)
    ncE_STOP                           :UINT     := 16#0106;      (* Emergency Stop *)
    ncEDGE2                            :USINT    := 12;           (* Second edge *)
    ncEMPTY                            :UINT     := 0;            (* Blank character *)
    ncENABLE                           :UINT     := 170;          (* Enable *)
    ncENCOD_IF                         :UINT     := 103;          (* Encoder interface *)
    ncENCODER_IF                       :UINT     := 103;          (* Encoder interface *)
    ncEND_SWITCH                       :USINT    := 4;            (* With HW end switch *)
    ncENDAT                            :USINT    := 4;            (* EnDat encoder *)
    ncENDAT_SafeMOTION                 :USINT    := 14;           (* EnDat encoder for SafeMOTION *)
    ncENDAT3                           :USINT    := 16;           (* EnDat 3 encoder *)
    ncENGLISH                          :UINT     := 1;            (* English *)
    ncENTRY                            :USINT    := 4;            (* Entry in the defined area *)
    ncEPROM                            :USINT    := 2;            (* EPROM (USERROM, USER FLASH) *)
    ncERR_CL0                          :UINT     := 215;          (* Error messages with class 0 *)
    ncERROR                            :UINT     := 1;            (* Error *)
    ncETEL                             :USINT    := 2;            (* Etel *)
    ncEVEN                             :USINT    := 3;            (* Even *)
    ncEVENT                            :UINT     := 136;          (* Event *)
    ncEX_PARAM                         :UINT     := 214;          (* Locking for EX(ternal) parameters *)
    ncEXECUTE                          :UINT     := 16#0176;      (* Execute *)
    ncEXPRESSION                       :UINT     := 16#0177;      (* Expression *)
    ncEXTENCOD                         :UINT     := 8;            (* External encoder *)
    ncEXTERN                           :USINT    := 128;          (* Extern *)
    ncFALSE                            :USINT    := 0;            (* False *)
    ncFC                               :USINT    := 1;            (* Frequency converter *)
    ncFF                               :USINT    := 32;           (* Feed forward control *)
    ncFF_NEG_MOVE                      :UINT     := 34;           (* Feed forward control, only into negative direction *)
    ncFF_POS_MOVE                      :UINT     := 33;           (* Feed forward control, only into positive direction *)
    ncFILE                             :USINT    := 3;            (* File *)
    ncFILE_XL                          :USINT    := 1;            (* Extra large file *)
    ncFILEOFFSET                       :USINT    := 0;            (* Byte offset within file *)
    ncFINISH                           :UINT     := 16#011a;      (* Finish *)
    ncFIXRAM                           :USINT    := 5;            (* FIXRAM *)
    ncFORCE                            :UINT     := 16#0120;      (* Force function *)
    ncFORMAT_ADR                       :UINT     := 0;            (* Parameter format: Data address *)
    ncFORMAT_B06                       :UINT     := 2;            (* Parameter format: Binary data, 6 bytes *)
    ncFORMAT_T10                       :UINT     := 1;            (* Parameter format: Data text, 10 bytes *)
    ncFORMAT_T14                       :UINT     := 3;            (* Parameter format: Data text, 14 bytes *)
    ncG00                              :USINT    := 0;            (* G00 *)
    ncG01                              :USINT    := 1;            (* G01 *)
    ncG02                              :USINT    := 2;            (* G02 *)
    ncG03                              :USINT    := 3;            (* G03 *)
    ncGANTRY                           :USINT    := 1;            (* Gantry axis *)
    ncGATE                             :USINT    := 1;            (* With reference switch gate *)
    ncGEARS                            :UINT     := 111;          (* Gears *)
    ncGEARS_V                          :UINT     := 116;          (* Speed gears *)
    ncGEARSABS                         :UINT     := 124;          (* Absolute gears *)
    ncGERMAN                           :UINT     := 0;            (* German *)
    ncGETINFO                          :UINT     := 16#0178;      (* Get Information *)
    ncGLOBAL                           :UINT     := 4;            (* Global *)
    ncglobal_action_ACP10MSG_TEXT      :UDINT    := 5;            (* ncglobal_action: Determine ACP10 message text *)
    ncglobal_action_NCDA_CREATE        :UDINT    := 1;            (* ncglobal_action: Create an NC data object *)
    ncglobal_action_NCDA_DIR           :UDINT    := 4;            (* ncglobal_action: Create an NC data object directory *)
    ncglobal_action_NCDA_INFO          :UDINT    := 2;            (* ncglobal_action: Determine NC data object info *)
    ncglobal_action_NCDA_WRITE         :UDINT    := 3;            (* ncglobal_action: Write into an NC data object *)
    ncGO_HOME                          :UINT     := 106;          (* Search home procedure *)
    ncGRAY                             :USINT    := 0;            (* Gray code *)
    ncHALT                             :UINT     := 219;          (* Halt *)
    ncHALT_ERR                         :USINT    := 32;           (* Halt after error *)
    ncHALT_EXEC_ERR                    :USINT    := 16#40;        (* Halt by error during program execution *)
    ncHALT_OK                          :UINT     := 135;          (* Move is halted *)
    ncHALT_PLC                         :USINT    := 4;            (* Halt by PLC program *)
    ncHALT_POS                         :USINT    := 8;            (* Halt after positioning within an NC program *)
    ncHALT_PRG                         :USINT    := 2;            (* Halt by NC program (M00 or M01) *)
    ncHALT_RST                         :USINT    := 16;           (* Halt after Restart of an NC program *)
    ncHALT_SST                         :USINT    := 1;            (* Halt by operating mode "Single Step" *)
    ncHIGH                             :USINT    := 1;            (* High *)
    ncHIPERFACE                        :USINT    := 8;            (* HIPERFACE encoder *)
    ncHIPERFACE_DSL                    :USINT    := 13;           (* HIPERFACE DSL encoder *)
    ncHOME_OFFSET                      :USINT    := 5;            (* Home Offset *)
    ncHOMING                           :UINT     := 106;          (* Homing procedure *)
    ncHORIZONTAL                       :USINT    := 0;            (* Horizontal *)
    ncHW_END                           :UINT     := 16#1000;      (* Hardware end *)
    ncI_LIMIT                          :USINT    := 30;           (* On the current limit *)
    ncIDENTIFICATION                   :UINT     := 10;           (* Identification *)
    ncIN_WINDOW                        :USINT    := 20;           (* Area "Within the window" *)
    ncINC                              :USINT    := 2;            (* Incremental encoder *)
    ncINC_COMP                         :USINT    := 252;          (* Incremental encoder and comparator function *)
    ncINC_OUTPUT                       :USINT    := 7;            (* Incremental encoder output (emulation) *)
    ncINC_SSI                          :USINT    := 10;           (* Incremental encoder with SSI *)
    ncINCH                             :USINT    := 1;            (* Inch *)
    ncINCLUDE                          :USINT    := 16#02;        (* Sub programs *)
    ncINDIRECT                         :USINT    := 255;          (* Indirect *)
    ncINDRAMAT                         :USINT    := 0;            (* Indramat *)
    ncINDUCTION                        :USINT    := 40;           (* Induction stop *)
    ncINFO                             :UINT     := 16#010c;      (* Info function *)
    ncINIT                             :UINT     := 16#0200;      (* Initialize *)
    ncINIT_SET_POS                     :USINT    := 6;            (* Initialization of set position *)
    ncINTERPRETER                      :USINT    := 41;           (* Interpreter *)
    ncINVERSE                          :USINT    := 255;          (* Inverse *)
    ncIP_INFO_AS_WARNING               :UINT     := 222;          (* Interpreter informations as warning *)
    ncIPGLOBAL                         :UINT     := 16#0181;      (* Interpreter Global *)
    ncISQ_F1_LOW_PASS                  :UINT     := 1024;         (* ISQ filter1: Low pass *)
    ncISQ_F1_NOTCH                     :UINT     := 128;          (* ISQ filter1: Notch *)
    ncISQ_F2_LOW_PASS                  :UINT     := 2048;         (* ISQ filter2: Low pass *)
    ncISQ_F2_NOTCH                     :UINT     := 256;          (* ISQ filter2: Notch *)
    ncISQ_F3_LOW_PASS                  :UINT     := 4096;         (* ISQ filter3: Low pass *)
    ncISQ_F3_NOTCH                     :UINT     := 512;          (* ISQ filter3: Notch *)
    ncISQ_RIPPLE                       :UINT     := 144;          (* ISQ-Ripple *)
    ncISQF_COMP                        :UINT     := 6;            (* Compensation *)
    ncISQF_LIM                         :UINT     := 5;            (* Limitation *)
    ncISQF_LIM2                        :UINT     := 7;            (* Limitation 2 *)
    ncISQF_LIM3                        :UINT     := 4;            (* Limitation 3 *)
    ncISQF_TRQ_ADDLIM                  :UINT     := 8;            (* Torque ADDLIM function *)
    ncISQR_MODE_A_PHI                  :UINT     := 20;           (* Mode A, Phi *)
    ncISQR_REF_SYSTEM_ENCODER          :USINT    := 0;            (* Encoder oriented *)
    ncISQR_REF_SYSTEM_FLUX             :USINT    := 1;            (* Flux oriented *)
    ncLAG_ERR                          :USINT    := 2;            (* Lag Error *)
    ncLATCH1                           :UINT     := 108;          (* Position latch 1 *)
    ncLATCH2                           :UINT     := 109;          (* Position latch 2 *)
    ncLATCHPOS                         :USINT    := 32;           (* Latch position *)
    ncLEFT                             :USINT    := 2;            (* Left *)
    ncLIMITER                          :UINT     := 114;          (* Limiter *)
    ncLIMITS                           :UINT     := 2;            (* Limit values *)
    ncLINE                             :UINT     := 16#0174;      (* Line *)
    ncLINEAR                           :USINT    := 1;            (* Linear *)
    ncLINEAR2                          :USINT    := 3;            (* Linear (mode2) *)
    ncLINENUMBER                       :USINT    := 4;            (* Line number *)
    ncLINK                             :UINT     := 16#0157;      (* Link *)
    ncLINMOT                           :USINT    := 11;           (* LinMot encoder *)
    ncLOAD                             :UINT     := 16#0114;      (* Load *)
    ncLOAD_ABORT                       :UINT     := 16#0116;      (* Abort loading *)
    ncLOW                              :USINT    := 0;            (* Low *)
    ncLOW_PASS                         :UINT     := 1;            (* Low pass *)
    ncM_GRP_TAB                        :UINT     := 126;          (* M function group table *)
    ncM1_STOP                          :UINT     := 203;          (* Operating mode "Stop at M1" *)
    ncMA_LATCHPOS                      :USINT    := 32;           (* Master latch position *)
    ncMA_S_START_I32                   :UINT     := 16#0800;      (* INT32 mode for "ma_s_start" *)
    ncMA_SL_ABS                        :USINT    := 40;           (* Absolute on master and slave *)
    ncMA_TO_SL                         :UINT     := 16#4000;      (* Change "Master to slave" *)
    ncMA_V_COMP                        :UINT     := 16#8000;      (* Master Speed Compensation *)
    ncMAGNESCALE                       :USINT    := 12;           (* Magnescale encoder *)
    ncMAINPROG                         :DINT     := -1;           (* Beginning of main program *)
    ncMC_STATE_CONTINUOUS_MOTION       :USINT    := 7;            (* Continuous Motion *)
    ncMC_STATE_DISABLED                :USINT    := 1;            (* Disabled *)
    ncMC_STATE_DISCRETE_MOTION         :USINT    := 6;            (* Discrete Motion *)
    ncMC_STATE_ERROR                   :USINT    := 10;           (* Error *)
    ncMC_STATE_ERRORSTOP               :USINT    := 4;            (* Errorstop *)
    ncMC_STATE_GroupDisabled           :USINT    := 6;            (* GroupDisabled *)
    ncMC_STATE_GroupErrorstop          :USINT    := 3;            (* GroupErrorstop *)
    ncMC_STATE_GroupHoming             :USINT    := 2;            (* GroupHoming *)
    ncMC_STATE_GroupMoving             :USINT    := 1;            (* GroupMoving *)
    ncMC_STATE_GroupStandby            :USINT    := 4;            (* GroupStandby *)
    ncMC_STATE_GroupStopping           :USINT    := 5;            (* GroupStopping *)
    ncMC_STATE_HOMING                  :USINT    := 3;            (* Homing *)
    ncMC_STATE_MOTION                  :USINT    := 9;            (* Motion *)
    ncMC_STATE_NET_INIT                :USINT    := 0;            (* Network Initialization (Drive Startup) *)
    ncMC_STATE_STANDSTILL              :USINT    := 2;            (* Standstill *)
    ncMC_STATE_STOPPING                :USINT    := 5;            (* Stopping *)
    ncMC_STATE_SYNCHRONIZED_MOTION     :USINT    := 8;            (* Synchronized Motion *)
    ncMEMCARD                          :USINT    := 4;            (* MEMCARD *)
    ncMESSAGE                          :UINT     := 1;            (* Message *)
    ncMM                               :USINT    := 0;            (* Millimeter *)
    ncMOD_DIR                          :USINT    := 128;          (* Module directory *)
    ncMOD_SYNC                         :UINT     := 303;          (* Module synchronisation *)
    ncMODEL_1MASS                      :UINT     := 4;            (* 1-mass load model *)
    ncMODEL_2MASS                      :UINT     := 3;            (* 2-mass load model *)
    ncMODULE                           :UINT     := 3;            (* NC module *)
    ncMOTOR                            :UINT     := 140;          (* Motor *)
    ncMOTOR_INDUCTION                  :UINT     := 141;          (* Induction Motor *)
    ncMOTOR_PAR                        :USINT    := 1;            (* With motor parameters *)
    ncMOTOR_PHASING                    :UINT     := 143;          (* Motor phasing *)
    ncMOTOR_SYNCHRON                   :UINT     := 142;          (* Synchronous motor *)
    ncMOTPH_DITHER                     :UINT     := 32;           (* Dither *)
    ncMOTPH_SATURATION                 :UINT     := 30;           (* Saturation *)
    ncMOTPH_SET_OFFSET                 :UINT     := 34;           (* Set commutation offset *)
    ncMOTPH_STEPPER                    :UINT     := 31;           (* Stepper *)
    ncMOVE                             :UINT     := 3;            (* Movement *)
    ncMOVE_BEG                         :USINT    := 1;            (* Beginning of Movement *)
    ncMOVE_CMD                         :USINT    := 5;            (* Move Command *)
    ncMOVE_END                         :USINT    := 2;            (* End of Movement *)
    ncMP_LOG                           :UINT     := 221;          (* Motion Packet log *)
    ncMTC                              :UINT     := 305;          (* Motion Trace Configuration *)
    ncMULTI_AX_TRACE                   :UINT     := 11;           (* Multi Axes Trace *)
    ncN_EDGE                           :USINT    := 1;            (* Negative edge *)
    ncN_PERIOD                         :USINT    := 1;            (* Next master period *)
    ncN_THRESH                         :USINT    := 4;            (* Below the threshold (negative) *)
    ncNC_SYS_RESTART                   :UINT     := 16#8000;      (* Restart of NC operating system *)
    ncNCBLOCKNO                        :USINT    := 22;           (* Block number *)
    ncNCGLOBAL                         :UINT     := 16#0180;      (* NC Global *)
    ncNCPR_POS                         :UINT     := 218;          (* Positioning within NC program *)
    ncNCRECNO                          :USINT    := 22;           (* Record Number *)
    ncNEG_MOVE                         :UINT     := 133;          (* Move in negative direction *)
    ncNEG_THRESH                       :USINT    := 2;            (* With threshold in negative direction *)
    ncNEGATIVE                         :USINT    := 1;            (* Negative *)
    ncNET_GLOBAL                       :UINT     := 12;           (* Network global (for all network interfaces) *)
    ncNET_TRACE                        :UINT     := 404;          (* Network Trace *)
    ncNETWORK                          :UINT     := 403;          (* Network *)
    ncNO_CHECK                         :USINT    := 30;           (* No Check *)
    ncNO_NET_TRACE                     :UINT     := 16#8000;      (* No Network Trace entry *)
    ncNOFEED                           :USINT    := 64;           (* Exclude axis from feed calculation *)
    ncNOSTOP                           :USINT    := 16;           (* No Stop *)
    ncNOTCH                            :UINT     := 2;            (* Notch *)
    ncNP_EDGE                          :USINT    := 11;           (* Dual-Edge Mode negative/positive *)
    ncOBJ_PTR                          :UINT     := 16#0040;      (* NC Object Pointer *)
    ncODD                              :USINT    := 2;            (* Odd *)
    ncOFF                              :USINT    := 0;            (* Off *)
    ncOK                               :UINT     := 0;            (* OK *)
    ncON                               :USINT    := 1;            (* On *)
    ncONL_POS                          :UINT     := 107;          (* Online positioning *)
    ncONL_V                            :UINT     := 113;          (* Online speed control *)
    ncONLYCOMP                         :USINT    := 30;           (* Only compensation gears *)
    ncONLYCOMP_DIRECT                  :USINT    := 35;           (* Only compensation gears (mode "direct") *)
    ncONTHEFLY                         :USINT    := 3;            (* On the fly *)
    ncOPEN                             :USINT    := 0;            (* Open *)
    ncOUT_WINDOW                       :USINT    := 30;           (* Area "Outside the window" *)
    ncP_EDGE                           :USINT    := 0;            (* Positive edge *)
    ncP_LATCH1                         :USINT    := 1;            (* Position latch 1 *)
    ncP_LATCH2                         :USINT    := 2;            (* Position latch 2 *)
    ncP_THRESH                         :USINT    := 3;            (* Above the threshold (positive) *)
    ncPACSI                            :USINT    := 1;            (* Pacsi *)
    ncPAR_ID                           :USINT    := 16;           (* Parameter ID *)
    ncPAR_ID1                          :USINT    := 16;           (* Parameter ID1 *)
    ncPAR_ID2                          :USINT    := 17;           (* Parameter ID2 *)
    ncPAR_ID3                          :USINT    := 18;           (* Parameter ID3 *)
    ncPAR_ID4                          :USINT    := 19;           (* Parameter ID4 *)
    ncPAR_LIST                         :UINT     := 402;          (* Parameter List *)
    ncPAR_LIST_MOVE                    :UINT     := 16384;        (* Move by Parameter List *)
    ncPAR_SEQU                         :UINT     := 400;          (* Parameter Sequence *)
    ncPAR_TYP_BOOL                     :UINT     := 1;            (* Parameter data type: BOOL *)
    ncPAR_TYP_BRMOD                    :UINT     := 14;           (* Parameter data type: Length of BR module as UDINT, INIT of RD/WR access *)
    ncPAR_TYP_BYTES                    :UINT     := 11;           (* Parameter data type: Byte array *)
    ncPAR_TYP_DATA                     :UINT     := 13;           (* Parameter data type: Length of binary data as UDINT, INIT of RD/WR access *)
    ncPAR_TYP_DINT                     :UINT     := 4;            (* Parameter data type: DINT *)
    ncPAR_TYP_GRP                      :UINT     := 12;           (* Parameter data type: Parameter group *)
    ncPAR_TYP_INT                      :UINT     := 3;            (* Parameter data type: INT *)
    ncPAR_TYP_LREAL                    :UINT     := 17;           (* Parameter data type: LREAL *)
    ncPAR_TYP_NIL                      :UINT     := 0;            (* Parameter data type: NIL (zero bytes) *)
    ncPAR_TYP_REAL                     :UINT     := 8;            (* Parameter data type: REAL *)
    ncPAR_TYP_SINT                     :UINT     := 2;            (* Parameter data type: SINT *)
    ncPAR_TYP_STR16                    :UINT     := 16#100a;      (* Parameter data type: STR16 *)
    ncPAR_TYP_STR32                    :UINT     := 16#200a;      (* Parameter data type: STR32 *)
    ncPAR_TYP_T5                       :UINT     := 9;            (* Parameter data type: T5 format (time and date packed, 5 bytes) *)
    ncPAR_TYP_UDINT                    :UINT     := 7;            (* Parameter data type: UDINT *)
    ncPAR_TYP_UINT                     :UINT     := 6;            (* Parameter data type: UINT *)
    ncPAR_TYP_USINT                    :UINT     := 5;            (* Parameter data type: USINT *)
    ncPAR_TYP_VOID                     :UINT     := 16#ffff;      (* Parameter data type: VOID (undefined) *)
    ncPAR_TYP_VOID_NO_NET_TRACE        :UINT     := 16#fffe;      (* Parameter data type: VOID with option NO_NET_TRACE *)
    ncPARID_TRACE                      :UINT     := 10;           (* Parid-Trace module *)
    ncPASSIVE                          :UINT     := 4;            (* Passive *)
    ncPATH                             :UINT     := 16#0182;      (* Path synchronous *)
    ncPATHDISTANCE                     :USINT    := 0;            (* Position on the path *)
    ncPI_PRED                          :USINT    := 0;            (* Predictive PI loop controller *)
    ncPLC_ITR                          :UINT     := 302;          (* PLC interrupt routine for external coupling *)
    ncPN_EDGE                          :USINT    := 10;           (* Dual-Edge Mode positive/negative *)
    ncPOLAR_PHI                        :USINT    := 8;            (* CNC axis (circular polar coordinate contour axis) *)
    ncPOLAR_RAD                        :USINT    := 4;            (* CNC axis (radial polar coordinate contour axis) *)
    ncPOS_ERR                          :USINT    := 4;            (* Position error (lag error at standstill) *)
    ncPOS_MOVE                         :UINT     := 134;          (* Move in positive direction *)
    ncPOS_THRESH                       :USINT    := 1;            (* With threshold in positive direction *)
    ncPOSITION                         :USINT    := 1;            (* Position Controller *)
    ncPOSITIVE                         :USINT    := 0;            (* Positive *)
    ncPOSMON                           :UINT     := 216;          (* CNC position monitor *)
    ncPOWERLINK_IF                     :UINT     := 16#0001;      (* POWERLINK interface *)
    ncPRELOAD                          :USINT    := 16#04;        (* Preloaded programs *)
    ncPROGRAM                          :UINT     := 201;          (* NC program *)
    ncPULL                             :USINT    := 2;            (* Pull *)
    ncPUSH                             :USINT    := 1;            (* Push *)
    ncPUSHPULL                         :USINT    := 0;            (* Push-pull *)
    ncQUADRATIC                        :USINT    := 2;            (* Quadratic *)
    ncQUADRATIC_NO_OVERSHOOT           :USINT    := 4;            (* Quadratic (without overshoot, higher delay time) *)
    ncQUICKSTOP                        :USINT    := 2;            (* Quickstop function *)
    ncQUICKSTOP_T_JOLT                 :USINT    := 2;            (* Jolt time for qickstop *)
    ncR_PAR                            :USINT    := 23;           (* R Parameter table *)
    ncR_PARAM                          :UINT     := 211;          (* R Parameter *)
    ncR_PARTAB                         :UINT     := 210;          (* R Parameter table *)
    ncR_PULSE                          :USINT    := 2;            (* Reference pulse *)
    ncRAM                              :USINT    := 1;            (* RAM *)
    ncREAD                             :UINT     := 16#0109;      (* Read *)
    ncREAD_COB                         :UINT     := 321;          (* Read CAN object *)
    ncRECORD                           :UINT     := 202;          (* CNC record *)
    ncREL_MOVE                         :UINT     := 131;          (* Move with relative move distance *)
    ncREL_POS                          :UINT     := 119;          (* Relative Positioning *)
    ncRELATIVE                         :USINT    := 1;            (* Relative *)
    ncRELEASE                          :UINT     := 16#0183;      (* Release *)
    ncREPLACE                          :USINT    := 1;            (* Replace existing CNC data object *)
    ncRESET                            :UINT     := 16#0140;      (* Reset *)
    ncRESOLVER                         :USINT    := 5;            (* Resolver *)
    ncRESTART                          :UINT     := 16#0111;      (* Restart *)
    ncRESTORE_POS                      :USINT    := 8;            (* Restore position *)
    ncRIGHT                            :USINT    := 3;            (* Right *)
    ncRING_STARTIDX                    :UINT     := 16#1000;      (* Start index of ring buffer *)
    ncROTARY                           :USINT    := 32;           (* Rotary axis *)
    ncS_ACT                            :USINT    := 11;           (* Actual Position *)
    ncS_ACT_TO_S_SET                   :UINT     := 16#0117;      (* Adjust set position with actual position *)
    ncS_JUMP_T                         :USINT    := 8;            (* Halt if "v_jump_t" is exceeded in tangential transitions *)
    ncS_MOTOR                          :USINT    := 1;            (* Stepper motor *)
    ncS_NCBLOCK                        :USINT    := 23;           (* Remaining path length of current NC block *)
    ncS_NCBLOCK_N1                     :USINT    := 25;           (* Path length of next NC block *)
    ncS_NCBLOCK_TOT                    :USINT    := 24;           (* Path length of current NC block *)
    ncS_NCPROG                         :USINT    := 21;           (* Trajectory Position *)
    ncS_REST                           :UINT     := 16#1000;      (* Mode "+ s_rest" *)
    ncS_SET                            :USINT    := 10;           (* Set Position *)
    ncS_SET_COMP                       :USINT    := 16;           (* Compensated Set Position *)
    ncS_START                          :USINT    := 10;           (* Start position of the master axis *)
    ncS_START_IV1                      :USINT    := 41;           (* Start position1 of master axis within intervall *)
    ncS_START_IV2                      :USINT    := 42;           (* Start position2 of master axis within intervall *)
    ncS_START_IV3                      :USINT    := 43;           (* Start position3 of master axis within intervall *)
    ncS_START_IV4                      :USINT    := 44;           (* Start position4 of master axis within intervall *)
    ncSAVE                             :UINT     := 16#0155;      (* Save *)
    ncSBL_CONTROL                      :USINT    := 2;            (* Consider single step instructions in CNC program *)
    ncSCALE                            :UINT     := 180;          (* Scale *)
    ncSDC_IF                           :UINT     := 16#0081;      (* SDC interface *)
    ncSEND                             :UINT     := 16#0170;      (* Senden *)
    ncSERCOS                           :USINT    := 2;            (* SERCOS *)
    ncSERCOS_LIN                       :USINT    := 16#80;        (* Linear encoder *)
    ncSERCOSIF                         :UINT     := 310;          (* SERCOS Interface *)
    ncSERVICE                          :UINT     := 165;          (* Service Interface *)
    ncSET                              :UINT     := 16#0108;      (* Set *)
    ncSET_GEN_ONLY                     :UINT     := 16#0400;      (* Only set value generation *)
    ncSETUP                            :UINT     := 16#4000;      (* Setup *)
    ncSETUP_MOVE_T_JOLT                :UINT     := 16;           (* Setup for movement parameters: Identification of jolt time *)
    ncSHORT_PATH                       :USINT    := 1;            (* Positioning on the shortest path *)
    ncSIG_LINE                         :UINT     := 110;          (* Signal line *)
    ncSIGNAL                           :USINT    := 4;            (* Signal line *)
    ncSIGNAL_CHIRP                     :UINT     := 1;            (* Chirp *)
    ncSIGNAL_CHIRP_TRAPEZOID           :UINT     := 2;            (* Chirp with trapezoid window *)
    ncSIGNAL_PRBS                      :UINT     := 0;            (* PRBS *)
    ncSIGNAL1                          :USINT    := 91;           (* Signal1 from PCC program *)
    ncSIGNAL2                          :USINT    := 92;           (* Signal2 from PCC program *)
    ncSIGNAL3                          :USINT    := 93;           (* Signal3 from PCC program *)
    ncSIGNAL4                          :USINT    := 94;           (* Signal4 from PCC program *)
    ncSIM_1MASS                        :UINT     := 1;            (* 1-mass load model *)
    ncSIM_1MASS_AUTO                   :UINT     := 0;            (* 1-mass load model (determine parameters automatically) *)
    ncSIM_1MASS_GEAR                   :UINT     := 3;            (* 1-mass load model with gearbox *)
    ncSIM_2MASS                        :UINT     := 2;            (* 2-mass load model *)
    ncSIM_2MASS_GEAR                   :UINT     := 4;            (* 2-mass load model with gearbox *)
    ncSIM_START                        :USINT    := 127;          (* Blocksearch *)
    ncSIMULAT                          :UINT     := 150;          (* Simulation mode *)
    ncSIMULATION                       :UINT     := 150;          (* Simulation mode *)
    ncSINGLE                           :UINT     := 204;          (* Single step operating mode *)
    ncSKIP_FCN                         :UINT     := 205;          (* "SKIP Function" operating mode *)
    ncSKIP_PARSE                       :USINT    := 10;           (* Skip parsing the file before start position *)
    ncSL_ABS                           :USINT    := 33;           (* Absolute on slave *)
    ncSL_LATCHPOS                      :USINT    := 34;           (* Slave latch position *)
    ncSPEED                            :USINT    := 2;            (* Speed Controller *)
    ncSPOSSTDZ                         :UINT     := 160;          (* Set position standardization *)
    ncSSE                              :USINT    := 2;            (* Spindle slope error compensation *)
    ncSSI                              :USINT    := 6;            (* SSI absolute encoder *)
    ncSSI_CONT_TYP_END                 :USINT    := 0;            (* End of configuration *)
    ncSSI_CONT_TYP_ERR                 :USINT    := 2;            (* Data bits as error bits *)
    ncSSI_CONT_TYP_ERR_INV             :USINT    := 3;            (* Data bits as inverted error bits *)
    ncSSI_CONT_TYP_FILL                :USINT    := 6;            (* Data bits as fill bits *)
    ncSSI_CONT_TYP_POS                 :USINT    := 1;            (* Date bits as position *)
    ncSSI_CONT_TYP_WRN                 :USINT    := 4;            (* Data bits as warning bits *)
    ncSSI_CONT_TYP_WRN_INV             :USINT    := 5;            (* Data bits as inverted warning bits *)
    ncSSI_PARITY_CHK_EVEN              :USINT    := 6;            (* SSI: Check for even parity *)
    ncSSI_PARITY_CHK_ODD               :USINT    := 7;            (* SSI: Check for odd parity *)
    ncSSI_SEND                         :USINT    := 3;            (* SSI Sender *)
    ncST_CAMPR                         :USINT    := 2;            (* Cam profile of the state *)
    ncST_COMP                          :USINT    := 4;            (* Compensation gears of the state *)
    ncST_END                           :USINT    := 12;           (* End of the state *)
    ncSTANDARD                         :USINT    := 0;            (* Standard *)
    ncSTART                            :UINT     := 16#0104;      (* Start *)
    ncSTART_CG                         :UINT     := 16#010d;      (* Start with compensation gears *)
    ncSTART_CYC_TRACE_CTRL_BITS        :UINT     := 16#0121;      (* Start with cyclic trace control bits *)
    ncSTART_IV                         :UINT     := 16#010e;      (* Start with interval *)
    ncSTART_NETWORK_REQU_PARCMD        :UINT     := 16#0118;      (* Start via Network with parameter command to drive *)
    ncSTART_T                          :UINT     := 16#0113;      (* Start (coupled with time after start) *)
    ncSTARTABS                         :UINT     := 16#0110;      (* Start absolutely *)
    ncSTARTDIR                         :UINT     := 16#010b;      (* Start directly *)
    ncSTATE                            :USINT    := 128;          (* State *)
    ncSTEP_INTO                        :USINT    := 221;          (* Next Step *)
    ncSTEP_OVER                        :USINT    := 220;          (* Next Step *)
    ncSTOP                             :UINT     := 16#0105;      (* Stop *)
    ncSW_END                           :USINT    := 1;            (* Software end position *)
    ncSW_OFF                           :UINT     := 16#0103;      (* Switch off *)
    ncSW_ON                            :UINT     := 16#0102;      (* Switch on *)
    ncSWITCH                           :USINT    := 2;            (* With absolute reference switch *)
    ncSWITCH_GATE                      :USINT    := 1;            (* With reference switch gate *)
    ncSWITCH_OFF                       :UINT     := 16#0103;      (* Switch off *)
    ncSWITCH_ON                        :UINT     := 16#0102;      (* Switch on *)
    ncSYNC                             :UINT     := 16#010a;      (* Synchronization *)
    ncSYSROM                           :USINT    := 0;            (* SYSROM (SYSTEM FLASH) *)
    ncT_FILTER                         :UINT     := 64;           (* Filter time constant *)
    ncT_FILTER_2                       :UINT     := 65;           (* Filter time constant (mode2) *)
    ncT_FORMAT                         :USINT    := 15;           (* T-Format encoder *)
    ncT_JOLT                           :USINT    := 1;            (* And the specified jolt time *)
    ncT_TOTAL                          :USINT    := 128;          (* Delayed by "t_total" *)
    ncTANGENT                          :USINT    := 2;            (* Tangential slave axis *)
    ncTEST                             :UINT     := 31;           (* Test *)
    ncTEST_POSITION                    :UINT     := 16386;        (* Controller test (position controller) *)
    ncTEST_SPEED                       :UINT     := 16385;        (* Controller test (speed controller) *)
    ncTEXT                             :UINT     := 16#010f;      (* Text *)
    ncTHRESHLD                         :USINT    := 0;            (* Threshold *)
    ncTOOL                             :USINT    := 22;           (* Tool data table *)
    ncTOOL_TAB                         :UINT     := 209;          (* Tool data table *)
    ncTOOLDAT                          :USINT    := 2;            (* Tooldata *)
    ncTR_DELAY                         :USINT    := 6;            (* Wait until end of start delay *)
    ncTR_END                           :USINT    := 1;            (* Trace brought to an end by NC module *)
    ncTR_REST                          :USINT    := 5;            (* Record until end of rest time *)
    ncTR_RING                          :USINT    := 4;            (* Record into ring buffer *)
    ncTR_SAVE                          :USINT    := 7;            (* Wait until data is saved *)
    ncTR_SDM                           :USINT    := 21;           (* Trace activated by Service Diagnostics Manager *)
    ncTR_START                         :USINT    := 20;           (* Trace startet by application program *)
    ncTR_TRACE                         :USINT    := 2;            (* Record until end of recording time *)
    ncTR_TRIGG                         :USINT    := 3;            (* Wait for start trigger *)
    ncTRACE                            :UINT     := 304;          (* Trace *)
    ncTRACE_DAT_WR                     :UINT     := 16#0802;      (* Write data records into Network Command Trace *)
    ncTRACE_PAR_SEC_REC                :UINT     := 16#0800;      (* Enter Parameter Sequence Records into Network Command Trace *)
    ncTRG_STOP                         :UINT     := 16#2000;      (* Mode "Stop after trigger" *)
    ncTRG_STOP_NORMAL                  :USINT    := 1;            (* Mode "Stop after trigger" (normal) *)
    ncTRG_STOP_S_REST                  :USINT    := 2;            (* Mode "Stop after trigger" (variation "+s_rest") *)
    ncTRGPOS_S                         :UINT     := 118;          (* Trigger positioning with target position *)
    ncTRIGGER                          :USINT    := 0;            (* Current axis: Trigger(1) *)
    ncTRIGGER_2                        :USINT    := 6;            (* Current axis: Trigger 2 *)
    ncTRIGGER1                         :USINT    := 20;           (* Trigger1 *)
    ncTRIGGER2                         :USINT    := 22;           (* Trigger2 *)
    ncTRIGGER3                         :USINT    := 24;           (* Trigger3 *)
    ncTRIGGER4                         :USINT    := 26;           (* Trigger4 *)
    ncTRIGGER5                         :USINT    := 28;           (* Trigger5 *)
    ncTRIGGER6                         :USINT    := 30;           (* Trigger6 *)
    ncTRIGGER7                         :USINT    := 32;           (* Trigger7 *)
    ncTRIGGER8                         :USINT    := 34;           (* Trigger8 *)
    ncTRIGGPOS                         :UINT     := 112;          (* Trigger positioning *)
    ncTRQ_LIMIT                        :USINT    := 30;           (* On the torque limit *)
    ncTRUE                             :USINT    := 1;            (* True *)
    ncTUNE_FBCTRL_MODEL_2MASS          :UINT     := 8192;         (* Autotuning: Feedback Control for 2-mass load model *)
    ncTUNE_MODEL_2MASS                 :UINT     := 32768;        (* Autotuning: 2-mass load model *)
    ncTUNE_MODEL_FRICTION              :UINT     := 8192;         (* Autotuning: Model friction parameters *)
    ncTUNE_STANDSTILL                  :USINT    := 0;            (* Autotuning with standstill *)
    ncTUNE_TN                          :UINT     := 16;           (* Determine integral action time *)
    ncTUNE_V_CONSTANT                  :USINT    := 1;            (* Autotuning with constant speed *)
    ncU_LIMIT                          :USINT    := 40;           (* On the voltage limit *)
    ncU_SET                            :USINT    := 13;           (* Set Voltage *)
    ncUF                               :USINT    := 7;            (* U/f Control *)
    ncUNLINK                           :UINT     := 16#0158;      (* Unlink *)
    ncUPLOAD                           :UINT     := 16#0152;      (* Upload *)
    ncUSE_FILTER_PAR                   :UINT     := 4;            (* Use filter parameters *)
    ncUSE_TN                           :UINT     := 8;            (* Use integral action time *)
    ncUSER                             :USINT    := 16#01;        (* Programs loaded by the user *)
    ncUSERROM                          :USINT    := 2;            (* USERROM (USER FLASH) *)
    ncV_ACT                            :USINT    := 14;           (* Actual Speed *)
    ncV_AXIS                           :UINT     := 4;            (* Virtual axis *)
    ncV_COMP_A_CYC                     :USINT    := 39;           (* Speed compensation cyclic (Mode: Slave acceleration) *)
    ncV_COMP_A_SL                      :USINT    := 36;           (* Speed compensation (Mode: Slave acceleration) *)
    ncV_COMP_S_MA                      :USINT    := 37;           (* Speed compensation (Mode: Master distance) *)
    ncV_COMP_S_SL                      :USINT    := 38;           (* Speed compensation (Mode: Slave distance) *)
    ncV_CONST                          :USINT    := 2;            (* Constant Speed *)
    ncV_JUMP                           :USINT    := 1;            (* Halt if "v_jump" is exceeded *)
    ncV_JUMP_T                         :USINT    := 4;            (* Halt if "v_jump_t" is exceeded *)
    ncV_SET                            :USINT    := 12;           (* Set Speed *)
    ncV_SET_COMP                       :USINT    := 17;           (* Compensated Set Speed *)
    ncV_TRAJ                           :USINT    := 20;           (* Trajectory Speed *)
    ncVARIABLE                         :UINT     := 16#0179;      (* Variable *)
    ncVERTICAL                         :USINT    := 1;            (* Vertical *)
    ncVIRTUAL_IF                       :UINT     := 16#0080;      (* Virtual interface *)
    ncWINDOW                           :USINT    := 1;            (* Window *)
    ncWITH_CAM                         :USINT    := 31;           (* With cam profile *)
    ncWITH_INDEX                       :UINT     := 0;            (* Data block transfer with index *)
    ncWITHOUT_INDEX                    :UINT     := 1;            (* Data block transfer without index *)
    ncWRITE_COB                        :UINT     := 320;          (* Write CAN Object *)
    ncWRITE_HPRIO                      :UINT     := 16#0122;      (* Write with high priority *)
    ncXY                               :USINT    := 0;            (* XY plane *)
    ncYZ                               :USINT    := 2;            (* YZ plane *)
    ncZ_TRANS                          :UINT     := 3;            (* Z transfer *)
    ncZERO                             :UINT     := 1;            (* Zero bytes *)
    ncZERO_DAT                         :USINT    := 21;           (* Zero point offset table *)
    ncZERO_TAB                         :UINT     := 208;          (* Zero point offset table *)
    ncZEROPMON                         :UINT     := 216;          (* Mode "Subtract zero point offset from positions" for CNC monitor *)
    ncZX                               :USINT    := 1;            (* ZX plane *)
    RIO1_2005                          :UINT     := 16#0580;      (* Remote I/O in system 2005 (master number 1) *)
    RIO2_2005                          :UINT     := 16#0980;      (* Remote I/O in system 2005 (master number 2) *)
    RIO3_2005                          :UINT     := 16#0d80;      (* Remote I/O in system 2005 (master number 3) *)
    RIO4_2005                          :UINT     := 16#1180;      (* Remote I/O in system 2005 (master number 4) *)
    SafeMC_action_GET_CFG_PTR          :UDINT    := 1;            (* SafeMC: Get pointer to configuration *)
    SafeMC_action_READ_SAFEIN_DATA     :UDINT    := 3;            (* SafeMC: Read SafeIN data *)
    SafeMC_action_READ_SAFEIN_DATA2    :UDINT    := 5;            (* SafeMC: Read SafeIN data2 *)
    SafeMC_action_READ_SAFEIN_DATA3    :UDINT    := 7;            (* SafeMC: Read SafeIN data3 *)
    SafeMC_action_READ_SAFEOUT_DATA    :UDINT    := 2;            (* SafeMC: Read SafeOUT data *)
    SafeMC_action_READ_SAFEOUT_DATA2   :UDINT    := 4;            (* SafeMC: Read SafeOUT data2 *)
    SafeMC_action_READ_SAFEOUT_DATA3   :UDINT    := 6;            (* SafeMC: Read SafeOUT data3 *)
END_VAR
